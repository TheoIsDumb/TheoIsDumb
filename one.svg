<svg width="1200" height="500" version="1.1" viewBox="0 0 317.5 132.29" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs>
  <linearGradient id="linearGradient2" x1="152.49" x2="177.02" y1="26.52" y2="125.65" gradientUnits="userSpaceOnUse">
   <stop stop-color="#1a1a1a" offset="0"/>
   <stop stop-color="#222" offset="1"/>
  </linearGradient>
 </defs>
 <rect width="317.5" height="132.29" ry="8.7614" fill="url(#linearGradient2)" style="paint-order:stroke fill markers"/>
 <path transform="matrix(.66295 -.058438 .060546 .63986 312.17 74.863)" d="m-346.12-26.702-5.7644-0.91913 2.5715 36.048 5.8009-1.6052zm2.5436 35.477-5.8012 1.6052 0.84968 10.92 6.2769 2.91zm-10.11-30.984-16.03 7.2442-0.32637 0.84184-4.8991 12.656 23.064 9.2274zm-4.0186 6.6575 1.0046 16.631-12.552-5.0221 2.9989-7.7454zm-45.361-25.725 1.0103 45.455 4.4106-0.097363-0.85618-38.458 6.9141 3.1197-1.9112 36.446 16.128-6.5206 8.8164-24.371zm15.795 11.967 13.18 5.9474-6.7579 18.678-7.8806 3.1865zm61.58-37.922 0.36193 18.495 4.3642 2.2194-0.75656-12.967 9.3267 6.2222 3.5135 21.041-11.251 1.1469-0.88401-13.127-4.4302-2.2792 0.43363 20.339 21.257-2.1684-4.6111-27.617zm-1.846 4.7078-21.15 8.4852-4.9106 7.4488 21.714-9.382-0.0747 22.992-7.4842-5.8986 0.44452 5.9956 11.323 8.8957zm-49.153 7.8813-1.2652 22.12 4.3606 2.144 12.969-4.7406-1.1943-4.2466-10.757 3.0247 0.61202-12.603 11.179 2.9285 1.1187-4.2673zm33.025-18.063-18.551 3.1777c0.0343 12.361-0.42753 25.854-0.39319 38.214l22.461 3.04zm-3.9956 5.4276 2.6831 33.899-13.231-1.7905 0.57364-30.43zm-39.802-9.3551-3.8468 13.557 16.591 4.8201 2.3455-17.186-4.0981 0.6719-1.6114 11.026-8.0897-2.2454 2.2959-7.8271zm-17.564 1.8314-11.5 10.35 2.9509 3.2797 9.8952-8.9051 5.2323 0.93986-8.6672 23.405 27.075 12.023 1.5394-26.624-4.4048-0.25444-1.1706 20.259-17.464-7.755 9.0585-24.464zm-9.5261 1.9965-20.483 5.8036 11.764 29.577 2.7814-6.5613-8.6386-20.103 10.965-3.1073 3.792 25.007 5.0054 4.1107zm74.993-30.666-27.098 25.591 2.6094 3.4585 27.098-25.591zm-4.9738-10.715-19.341 9.4521-0.21397 1.1479-6.1333 32.989 35.101-5.8793-0.73663-26.557zm-1.1439 5.3658 5.8882 7.568 0.58204 20.989-25.98 4.3507 4.7805-25.71zm-34.456 2.2333-6.0946 4.2523 0.17317-3.4923-22.671-2.0705-1.1834 18.454-1.1986 16.902 4.7858-3.9172 0.81514-12.702 0.89351-13.931 13.943 1.2734-4.0273 26.495 4.6782 0.93227s2.2754-14.818 3.6899-22.492l7.0892-4.9469 7.3662 1.7888-4.4016 22.69 4.7466-0.6607 4.7773-25.325zm35.347-9.9023c-0.26047 0.0282-0.51877 0.10065-0.76477 0.22084l-19.343 9.4533-2e-3 1e-3c-0.53571 0.27135-0.89586 0.76029-1.093 1.3189-0.0653-0.0287-0.1265-0.0663-0.19426-0.0889l-0.0105-3e-3 -13.393-3.2523c-0.64604-0.15703-1.3289-0.0288-1.8741 0.35171l-2.5601 1.7872c-0.32793-0.76128-0.9773-1.3466-1.8199-1.4344h-2e-3l-22.673-2.0714c-1.2959-0.11837-2.4399 0.86172-2.5233 2.1604l-1.1819 18.447-1.0746 15.141c-0.5231-0.44178-1.1738-0.71166-1.8659-0.5838l-0.0113 0.0021-20.495 5.8083c-1.3179 0.37319-2.0283 1.8139-1.5224 3.0867l11.764 29.576c0.37842 0.95255 1.2565 1.4522 2.1287 1.4621 0.87212 0.0098 1.7605-0.47024 2.1604-1.414l2.781-6.5619c0.24656-0.58179 0.2444-1.2394-5e-3 -1.8199l-7.5966-17.678 5.8973-1.6706 3.3965 22.406c0.0858 0.56616 0.37852 1.0812 0.82101 1.4447l5.0058 4.1111c0.81035 0.66487 1.8416 0.66139 2.6133 0.22391 0.77168-0.43748 1.3035-1.3209 1.1492-2.3577l-0.76067-5.0947 2.9446 1.3077c-0.21066 0.28659-0.42573 0.5779-0.4877 0.93142l-4e-3 0.02556 1.0101 45.481c0.0284 1.2766 1.0923 2.2938 2.3689 2.2657l4.4107-0.097133c0.7825-0.017012 1.4324-0.44749 1.8393-1.0531 0.11476 1.5238 1.6575 2.5838 3.1255 1.9906l16.158-6.5312 0.0266-0.019418c0.13655-0.099361 0.23721-0.23586 0.34865-0.36194 0.0779 0.076825 0.14693 0.16281 0.23515 0.228l0.0266 0.019418 23.104 9.2437 8e-3 0.0021c0.49082 0.15968 0.99832 0.09468 1.4753-0.07463-0.15379 0.19853-0.34546 0.37083-0.42838 0.61038l-0.0174 0.05214 0.85371 10.975c0.0652 0.83467 0.57577 1.5699 1.3353 1.9221l6.2766 2.9098c1.6037 0.7437 3.4357-0.53909 3.285-2.3004l-1.3281-15.472-0.0133-0.03371c-0.0671-0.17622-0.17389-0.33217-0.28117-0.48667 0.2558-0.4137 0.39849-0.88897 0.36296-1.3772l-2.5724-33.065 3.3136 0.44884c1.4592 0.19775 2.7379-1.0124 2.6215-2.4804l-0.048-0.60732 8.7805 6.8982c1.5042 1.1807 3.7416 0.0985 3.7492-1.8138v-0.02556c0.17439 0.06215 0.34037 0.1507 0.52552 0.16972l0.0266 0.0021 21.284-2.1706c1.3278-0.13522 2.2717-1.3715 2.052-2.6879l-4.6121-27.616c-0.10689-0.63947-0.4763-1.205-1.0193-1.5592l-17.324-11.306c-1.5463-1.0091-3.6201 0.13943-3.5846 1.9855l0.048 2.4773c-0.13236 0.0044-0.26564-0.0054-0.39568 0.02147l-0.0225 0.0051-11.947 4.7931-1.0316-13.038-0.0154-0.03783c-0.015-0.03705-0.0394-0.06911-0.0563-0.10531l6.6907-1.1206c1.1387-0.19085 1.9663-1.1953 1.9344-2.3495l-0.73716-26.556c-0.0137-0.49327-0.18469-0.96931-0.4877-1.3588l-8.6762-11.153c-0.50441-0.64823-1.3002-0.96505-2.0816-0.8803zm0.6574 0.55415c0.39016 0.0904 0.74999 0.31154 1.0112 0.64719l8.6762 11.153c0.2346 0.30157 0.36664 0.67013 0.37727 1.0521l0.73716 26.556c0.0248 0.89702-0.61181 1.6716-1.4968 1.8199l-7.4565 1.2484 0.23413 0.33944c0.0698 0.10096 0.12709 0.21008 0.17484 0.32308l1.0797 13.656 12.554-5.0364c0.17098-0.03419 0.34575-0.04494 0.5194-0.02863l0.2924 0.02761-0.0593-3.0202c-0.028-1.4556 1.5556-2.3334 2.7748-1.5377l17.324 11.306c0.42061 0.27432 0.70754 0.71219 0.79033 1.2075h-1e-3l4.6111 27.616c0.17123 1.0258-0.5532 1.9753-1.5878 2.0806l-21.217 2.1645c-0.24486-0.0271-0.48246-0.1013-0.69626-0.22391l-0.39056-0.22391-2e-3 0.82714c-6e-3 1.5108-1.7142 2.3377-2.9026 1.4048l-9.7191-7.6364 0.14211 1.7974c0.0909 1.1467-0.89063 2.0746-2.0305 1.9201l-3.9557-0.53472 2.6235 33.71c0.0308 0.42599-0.0914 0.84812-0.34455 1.1921l-0.12065 0.16359 0.12883 0.15745c0.11675 0.14298 0.20713 0.30489 0.27503 0.47644l1.321 15.385c0.11854 1.3856-1.2811 2.3661-2.5428 1.781l-6.2766-2.9098c-0.5887-0.273-0.98417-0.84168-1.0347-1.4886l-0.8435-10.842c0.11178-0.30393 0.29587-0.57724 0.54802-0.78113l0.18097-0.1462-0.12474-0.19733c-0.032-0.05057-0.0611-0.10294-0.0879-0.15642l-0.1319-0.26276-0.24538 0.16154c-0.45385 0.2972-1.0174 0.37178-1.5336 0.20551l-23.011-9.2058c-0.12218-0.09277-0.2345-0.19825-0.32922-0.319l-0.22187-0.28321-0.20141 0.29854c-0.11386 0.16977-0.25826 0.31672-0.42226 0.43862l-16.085 6.5026c-1.2263 0.4955-2.5326-0.43673-2.464-1.7575l1.8465-35.22-3.2002-1.4437 0.79237 35.611c0.0224 0.9945-0.76096 1.8126-1.7555 1.8342l-4.4107 0.097133c-0.99381 0.021887-1.8111-0.76066-1.8332-1.7545l-1.0091-45.414c0.0658-0.36273 0.2387-0.69767 0.50098-0.95698l0.27299-0.26992-3.7165-1.6502c-0.0653-0.05862-0.12799-0.12057-0.18404-0.18812l-0.59914-0.72183 0.99175 6.6396c0.12271 0.82417-0.28748 1.4831-0.89052 1.825-0.60305 0.34188-1.3792 0.35472-2.0234-0.17381l-5.0058-4.1111c-0.34266-0.28145-0.56852-0.67908-0.63492-1.1175l-3.4854-22.993-7.0414 1.9937 7.8317 18.226c0.19325 0.44962 0.19404 0.9583 3e-3 1.4089l-2.781 6.5619c-0.31733 0.74902-0.99159 1.1027-1.6727 1.095-0.68109-0.0076-1.3468-0.37684-1.6471-1.1328l-11.764-29.576c-0.39444-0.99234 0.15139-2.0984 1.1788-2.3894l20.46-5.7981h1e-3c0.68422-0.12599 1.3777 0.15325 1.7831 0.71876l0.42226 0.58993 1.1594-16.346 1.1819-18.45c0.065-1.0113 0.94564-1.7638 1.9549-1.6716l22.667 2.0714c0.7492 0.0781 1.3689 0.61332 1.5541 1.3434l0.093 0.36706 3.0887-2.1553c0.42231-0.29471 0.95041-0.39359 1.4508-0.27197l13.364 3.2452c0.12076 0.0406 0.23713 0.0933 0.3466 0.15847l0.31797 0.18915 0.0726-0.36296c0.10837-0.53937 0.45804-0.99875 0.94881-1.2474l19.337-9.4502c0.38213-0.18666 0.803-0.22736 1.1932-0.137zm-2.0704 9.3674-0.19016 0.093-12.418 6.068-2.8515 15.338 18.555-17.522zm-0.15132 0.65639 2.5407 3.2676-17.041 16.092 2.509-13.501zm-56.59 4.7736-0.0163 0.26891-0.75863 11.823-0.80362 12.512 8.2192 1.4764-0.1227-0.40897c-0.0175-0.05826-0.0304-0.11716-0.0419-0.17688l3.7339-24.563zm0.48769 0.57052 9.121 0.83224-3.651 24.023-6.9841-1.2545 0.77295-12.046zm23.575 0.6707-0.0961 0.0675-5.7061 3.9813-0.0195 0.10633c-1.1239 6.2306-2.2411 13.464-2.8311 17.259l-0.0521 0.33229 0.33535-0.0317c0.31857-0.03009 0.63865 0.02913 0.92835 0.16461l3.5509 2.7881c0.57794 0.45371 0.82024 1.212 0.61345 1.917l-1.7831 6.0793 4.3739 1.2136 1.3067-8.9451c0.16364-0.2989 0.40467-0.55001 0.70342-0.71467l0.31286-0.17279-0.2597-0.2464c-0.43445-0.41147-0.63529-1.0111-0.53575-1.6011 6e-5 -3.46e-4 -5e-5 -6.81e-4 0-1e-3l4.0743-21.003zm0.10532 0.56437 4.2011 1.0194-3.9803 20.522v0.0031c-0.11392 0.6728 0.1179 1.3318 0.55006 1.8485-0.28773 0.20775-0.56801 0.43251-0.73512 0.74841l-0.0214 0.03987-1.2371 8.4697-3.2901-0.91302 1.6338-5.5701c0.2666-0.90898-0.0483-1.8903-0.79339-2.4753l-3.6091-2.8352-0.0266-0.01227c-0.27781-0.1325-0.58733-0.14338-0.89258-0.15847 0.59259-3.8133 1.6725-10.792 2.7718-16.899zm37.406 5.9576-0.42533 0.40181-14.574 13.764 15.321-2.5652zm-0.49076 1.184 0.27707 9.9747-13.176 2.2074zm-23.796 13.792-0.13905 0.37932-1.3895 3.7778 4.5273-1.2381zm0.21266 0.93756 1.7647 1.7177-2.6644 0.72898zm1.4283 7.6426-0.30366 0.05112-5.5773 0.93449c-0.4062 0.0085-0.80368-0.11945-1.1267-0.36603l-0.35683-0.27298-1.5633 11.449c-0.18253 0.93711-1.0595 1.5649-2.006 1.4344l-0.10117 0.51325 10.867 2.783 5e-3 -0.33126c0.0867-5.3762 0.17769-10.759 0.16358-15.887zm-0.52553 0.61754c9e-3 4.9244-0.0741 10.077-0.15745 15.237l-9.0729-2.324c0.6664-0.30104 1.1967-0.87588 1.3434-1.642l2e-3 -0.0071 1.4641-10.724c0.34302 0.17706 0.69157 0.36179 1.0817 0.35274h0.0184zm-38.596 1.0449-0.0951 0.08589-7.7601 6.9831 2.0469 13.704 0.50406 0.05215 7.5618-20.421zm0.1595 0.56028 1.3905 0.24947-6.9913 18.879-1.8536-12.419zm10.428 0.3875-6.7275 18.167 13.555 6.019 0.94062-16.288-7.0322-2.0438c-0.95041-0.27603-1.4958-1.2604-1.2259-2.2125l0.9805-3.4599 6e-3 -0.01943zm43.251 2.0244-0.2822 0.04805-6.2919 1.0592-0.51632 27.342 9.443 1.278-0.92222-11.658-5.0211 2.1696c-0.83348 0.3601-1.6119 0.07107-2.0857-0.49383-0.47384-0.5649-0.62334-1.3828-0.12372-2.1409l4.9107-7.4483c0.20124-0.30498 0.49006-0.54082 0.82918-0.67684l0.78625-0.31695zm-0.47645 0.61038 0.65026 8.211-0.42942 0.17279c-0.4374 0.17576-0.81186 0.48069-1.0715 0.87417l-4.9107 7.4483c-0.0603 0.09144-0.0791 0.18843-0.12473 0.28219l0.30366-16.048zm-43.835 1.7361c0.0963 0.90925 0.72182 1.7166 1.6512 1.9866l6.6314 1.9273-0.87417 15.116-12.413-5.5118zm16.709 5.8155-0.0174 0.33024-0.0255 0.49587 0.34762-0.09406c0.0815-0.02187 0.16473-0.03784 0.24844-0.04805l0.0419-0.51121zm57.177 1.0286 0.0306 0.5245 0.51529 8.8367c5e-3 0.47979-0.18066 0.94214-0.51835 1.2831l-0.19018 0.19221 0.19836 0.18403c0.20886 0.19339 0.3655 0.43523 0.46315 0.7024l0.75454 11.222 7.5004-0.76579-3.0693-18.387zm0.58481 1.0183 4.6213 3.0826 2.9394 17.614-6.4065 0.65332-0.7249-10.769-0.0122-0.03374c-0.0991-0.28045-0.28689-0.51305-0.48258-0.73512 0.3432-0.42001 0.55811-0.93146 0.55109-1.4784v-0.0062zm-14.551 1.7361-0.36705 0.15848-6.0517 2.6143 0.8067 10.188 0.27298-0.03578c0.25106-0.03278 0.5051-0.0063 0.74738 0.06646l4.5375 3.5764zm-0.52552 0.79749-0.048 14.695-3.784-2.9824-0.045-0.01431c-0.23457-0.07474-0.48193-0.06758-0.72693-0.06543l-0.73717-9.3265zm-36.066 5.792-0.0163 0.32308-0.36807 7.5822 6.3533-1.7872 2e-3 -0.1963c0.0117-1.3709 0.0266-2.7515 0.0429-4.1398l2e-3 -0.20448zm21.949 0.30672 0.81385 10.281-8.3388-1.1287 0.16359-8.6711c0.0946 0.26234 0.13992 0.5486 0.31695 0.75966 0.60463 0.72083 1.6544 1.0881 2.6961 0.63799zm-21.457 0.36398 4.9965 1.3097c-0.0147 1.2536-0.0279 2.5013-0.0388 3.741l-5.2757 1.4835zm5.4525 14.124-0.42022 0.15438-7.0291 2.5693 3.969 1.7913c0.85674 0.38668 1.2684 1.3623 0.9488 2.2462l-2.9701 8.2121 15.363-6.9443c0.2389-0.03263 0.4819-0.0205 0.71467 0.04294l0.35579 0.09713-0.26787-3.7574c0.0408-0.16102 0.0997-0.31733 0.18301-0.46111l0.19631-0.3374-9.9542-1.3475 0.10838 0.38341c0.0742 0.26426 0.0876 0.39152 0.11246 0.54393-0.0801-0.09658-0.15738-0.18458-0.25049-0.32002-0.27732-0.40339-0.58421-0.94119-0.80771-1.4222-0.11175-0.2405-0.20214-0.46752-0.25867-0.65128-0.0565-0.18376-0.0683-0.33377-0.0645-0.35785zm-0.53575 0.7525c0.0156 0.06725 5e-3 0.12694 0.0276 0.20039 0.0671 0.21804 0.16648 0.46213 0.28526 0.71774 0.23753 0.51122 0.55277 1.0656 0.85064 1.4989 0.14894 0.21665 0.29257 0.40222 0.42839 0.5429 0.0679 0.07034 0.13268 0.13041 0.20653 0.17892 0.0739 0.04851 0.16175 0.09935 0.29651 0.08486 0.13475-0.01449 0.25633-0.14056 0.29342-0.24231 0.0371-0.10176 0.0394-0.1945 0.0338-0.30468-6e-3 -0.12962-0.0679-0.35358-0.1094-0.54188l8.4799 1.1472c-0.0362 0.0949-0.089 0.1831-0.11246 0.28219l-9e-3 0.03886 0.22801 3.191c-0.20024-0.02289-0.39982-0.06551-0.60016-0.03578l-0.0358 0.0051-14.315 6.4699 2.5489-7.0465c0.41094-1.1366-0.12531-2.4034-1.2269-2.9006l-2.8004-1.2637zm-31.231 0.34967 2.1164 0.95494-1.4712 28.052zm10.484 4.1571-0.0205 0.38238-1.1533 21.995 4.5273-1.8301 5.9198-16.364zm0.48258 0.79135 8.1344 3.6705-5.6765 15.687-3.5478 1.4355zm25.797 12.959-0.34557 0.15643-5.1622 2.3321-2.0929 5.4065 8.2775 3.3116zm-0.47746 0.7893 0.58175 9.624-7.0301-2.8127 1.8291-4.7236z" color="#000000" fill="#f2f2f2" style="-inkscape-stroke:none;paint-order:markers fill stroke"/>
 <path d="m132.57 102.54v1.4132h-1.8574v4.9665q0 1.1952 1.0902 1.1952 0.28265 0 0.61375-0.0646l0.3311 1.4536q-0.56529 0.18574-1.2114 0.18574-1.171 0-1.8736-0.65413-0.70258-0.6622-0.70258-1.7605v-5.3219h-1.3163v-1.4132h1.3163v-2.1481h1.7524v2.1481zm3.1818 3.6744v5.3542h-1.7444v-12.033h1.7201v4.4901h0.12114q0.31495-0.73489 0.961-1.1629 0.65413-0.43609 1.704-0.43609 1.389 0 2.245 0.8641 0.85602 0.85602 0.85602 2.5438v5.7337h-1.7605v-5.5238q0-0.99331-0.51684-1.5425-0.51684-0.55722-1.4213-0.55722-0.93678 0-1.5505 0.5976-0.61375 0.58953-0.61375 1.6717zm11.419 5.5399q-1.3325 0-2.3016-0.57338-0.961-0.58145-1.4859-1.6232-0.51685-1.0418-0.51685-2.4389 0-1.389 0.50877-2.4469 0.51685-1.0579 1.4456-1.6474 0.93678-0.5976 2.1966-0.5976 1.0256 0 1.9462 0.46032 0.92063 0.45224 1.494 1.4536 0.58145 0.99331 0.58145 2.6165v0.6299h-6.4202q0.0485 1.3083 0.75104 2.0189 0.70258 0.70258 1.817 0.70258 0.74297 0 1.284-0.32303 0.54107-0.3311 0.78334-0.97716l1.6636 0.31496q-0.2988 1.0902-1.2921 1.7605-0.98523 0.67028-2.455 0.67028zm-0.15343-7.8738q-1.066 0-1.6959 0.71066-0.62183 0.70258-0.69451 1.6797h4.6758q-0.0969-1.066-0.67028-1.7282-0.57337-0.6622-1.6151-0.6622zm15.683 0.87217-1.5909 0.27457q-0.15343-0.45224-0.57337-0.83179-0.41186-0.37956-1.2356-0.37956-0.74296 0-1.2437 0.33918-0.49261 0.3311-0.49261 0.84795 0 0.46031 0.3311 0.74296 0.33918 0.27457 1.0741 0.44416l1.4455 0.32303q2.4631 0.55722 2.4631 2.4389 0 0.82371-0.46839 1.4536-0.46839 0.6299-1.3002 0.99331-0.83179 0.35533-1.922 0.35533-1.5182 0-2.4712-0.64606-0.95293-0.65413-1.171-1.8493l1.6878-0.25842q0.3311 1.3406 1.9462 1.3406 0.8641 0 1.381-0.3634 0.51684-0.36341 0.51684-0.88025 0-0.85603-1.276-1.1548l-1.5263-0.33917q-1.2679-0.29073-1.8736-0.91256-0.5976-0.6299-0.5976-1.5828 0-0.79949 0.44416-1.4052 0.45224-0.60568 1.2356-0.93678 0.78334-0.33918 1.8009-0.33918 1.4698 0 2.3016 0.63798 0.83987 0.63798 1.1144 1.6878zm3.1495 1.4617v5.3542h-1.7444v-12.033h1.7201v4.4901h0.12114q0.31495-0.73489 0.961-1.1629 0.65413-0.43609 1.704-0.43609 1.389 0 2.245 0.8641 0.85602 0.85602 0.85602 2.5438v5.7337h-1.7605v-5.5238q0-0.99331-0.51684-1.5425-0.51684-0.55722-1.4213-0.55722-0.93678 0-1.5505 0.5976-0.61375 0.58953-0.61375 1.6717zm7.5346 5.3542v-9.0286h1.7444v9.0286zm0.88025-10.418q-0.46031 0-0.78334-0.30687-0.32303-0.30688-0.32303-0.73489 0-0.43608 0.32303-0.74296t0.78334-0.30688q0.45224 0 0.77527 0.30688 0.3311 0.30688 0.3311 0.74296 0 0.42801-0.3311 0.73489-0.32303 0.30687-0.77527 0.30687zm6.7432 1.389v1.4132h-1.8574v4.9665q0 1.1952 1.0902 1.1952 0.28265 0 0.61375-0.0646l0.3311 1.4536q-0.56529 0.18574-1.2114 0.18574-1.171 0-1.8736-0.65413-0.70258-0.6622-0.70258-1.7605v-5.3219h-1.3163v-1.4132h1.3163v-2.1481h1.7524v2.1481zm8.7217 9.2144q-1.2679 0-2.2127-0.58145-0.94486-0.58145-1.4698-1.6232-0.52492-1.0498-0.52492-2.4469 0-1.4052 0.52492-2.455 0.52492-1.0579 1.4698-1.6394 0.94485-0.58145 2.2127-0.58145 1.2679 0 2.2127 0.58145 0.95293 0.58145 1.4778 1.6394 0.52492 1.0498 0.52492 2.455 0 1.3971-0.52492 2.4469-0.52492 1.0418-1.4778 1.6232-0.94485 0.58145-2.2127 0.58145zm0-1.4778q0.8318 0 1.3729-0.43609t0.79949-1.1548q0.2665-0.72681 0.2665-1.5828 0-0.87217-0.2665-1.599-0.25842-0.72681-0.79949-1.1629t-1.3729-0.43609q-0.82372 0-1.3648 0.43609t-0.80757 1.1629q-0.25842 0.72681-0.25842 1.599 0 0.85603 0.25842 1.5828 0.2665 0.71873 0.80757 1.1548t1.3648 0.43609zm11.193-2.4389v-5.2976h1.7444v9.0286h-1.712v-1.5667h-0.0969q-0.31495 0.71874-1.0014 1.2033-0.67835 0.48454-1.6959 0.47647-1.3083 8e-3 -2.132-0.85603-0.82372-0.86409-0.82372-2.5438v-5.7418h1.7444v5.5399q0 0.92063 0.51684 1.4698 0.51685 0.54107 1.3325 0.53299 0.49262 0 0.97716-0.24227 0.49261-0.24227 0.81564-0.74296 0.3311-0.50069 0.3311-1.2598zm7.6234-5.2976v1.4132h-1.8574v4.9665q0 1.1952 1.0902 1.1952 0.28265 0 0.61375-0.0646l0.3311 1.4536q-0.5653 0.18574-1.2114 0.18574-1.171 0-1.8736-0.65413-0.70258-0.6622-0.70258-1.7605v-5.3219h-1.3163v-1.4132h1.3163v-2.1481h1.7524v2.1481zm8.7217 9.2144q-1.2679 0-2.2127-0.58145-0.94486-0.58145-1.4698-1.6232-0.52492-1.0498-0.52492-2.4469 0-1.4052 0.52492-2.455 0.52492-1.0579 1.4698-1.6394 0.94485-0.58145 2.2127-0.58145 1.2679 0 2.2127 0.58145 0.95293 0.58145 1.4778 1.6394 0.52492 1.0498 0.52492 2.455 0 1.3971-0.52492 2.4469-0.52492 1.0418-1.4778 1.6232-0.94485 0.58145-2.2127 0.58145zm0-1.4778q0.8318 0 1.3729-0.43609t0.79949-1.1548q0.2665-0.72681 0.2665-1.5828 0-0.87217-0.2665-1.599-0.25842-0.72681-0.79949-1.1629t-1.3729-0.43609q-0.82371 0-1.3648 0.43609-0.54107 0.43609-0.80756 1.1629-0.25843 0.72681-0.25843 1.599 0 0.85603 0.25843 1.5828 0.26649 0.71873 0.80756 1.1548 0.54108 0.43609 1.3648 0.43609zm6.0648 1.2921v-7.6154h-1.389v-1.4132h1.389v-1.0498q0-0.83987 0.37149-1.3971 0.37148-0.55722 0.97715-0.83987 0.61376-0.28265 1.3244-0.28265 0.54107 0 0.91255 0.08883 0.37955 0.08883 0.5653 0.15344l-0.41994 1.4213q-0.11306-0.0323-0.30688-0.0808-0.19381-0.0565-0.47646-0.0565-0.63798 0-0.92063 0.32303-0.28265 0.31495-0.28265 0.92063v0.79949h1.9624v1.4132h-1.9624v7.6154zm15.255-6.8159-1.5909 0.27457q-0.15344-0.45224-0.57338-0.83179-0.41186-0.37956-1.2356-0.37956-0.74296 0-1.2436 0.33918-0.49262 0.3311-0.49262 0.84795 0 0.46031 0.3311 0.74296 0.33918 0.27457 1.0741 0.44416l1.4456 0.32303q2.4631 0.55722 2.4631 2.4389 0 0.82371-0.46839 1.4536-0.46839 0.6299-1.3002 0.99331-0.8318 0.35533-1.922 0.35533-1.5182 0-2.4712-0.64606-0.95293-0.65413-1.171-1.8493l1.6878-0.25842q0.3311 1.3406 1.9462 1.3406 0.8641 0 1.3809-0.3634 0.51684-0.36341 0.51684-0.88025 0-0.85603-1.276-1.1548l-1.5263-0.33917q-1.2679-0.29073-1.8736-0.91256-0.5976-0.6299-0.5976-1.5828 0-0.79949 0.44417-1.4052 0.45223-0.60568 1.2356-0.93678 0.78335-0.33918 1.8009-0.33918 1.4698 0 2.3016 0.63798 0.83987 0.63798 1.1144 1.6878zm5.6045-2.2127v1.4132h-1.8574v4.9665q0 1.1952 1.0902 1.1952 0.28265 0 0.61375-0.0646l0.33111 1.4536q-0.5653 0.18574-1.2114 0.18574-1.171 0-1.8736-0.65413-0.70259-0.6622-0.70259-1.7605v-5.3219h-1.3163v-1.4132h1.3163v-2.1481h1.7524v2.1481zm6.9693 5.2976v-5.2976h1.7444v9.0286h-1.712v-1.5667h-0.0969q-0.31495 0.71874-1.0014 1.2033-0.67836 0.48454-1.6959 0.47647-1.3083 8e-3 -2.132-0.85603-0.82372-0.86409-0.82372-2.5438v-5.7418h1.7444v5.5399q0 0.92063 0.51685 1.4698 0.51684 0.54107 1.3325 0.53299 0.49262 0 0.97716-0.24227 0.49262-0.24227 0.81564-0.74296 0.33111-0.50069 0.33111-1.2598zm4.0136 3.731v-7.6154h-1.389v-1.4132h1.389v-1.0498q0-0.83987 0.37148-1.3971 0.37148-0.55722 0.97716-0.83987 0.61375-0.28265 1.3244-0.28265 0.54107 0 0.91255 0.08883 0.37956 0.08883 0.5653 0.15344l-0.41994 1.4213q-0.11305-0.0323-0.30687-0.0808-0.19382-0.0565-0.47647-0.0565-0.63798 0-0.92062 0.32303-0.28265 0.31495-0.28265 0.92063v0.79949h1.9624v1.4132h-1.9624v7.6154zm5.4107 0v-7.6154h-1.389v-1.4132h1.389v-1.0498q0-0.83987 0.37148-1.3971 0.37148-0.55722 0.97716-0.83987 0.61375-0.28265 1.3244-0.28265 0.54107 0 0.91256 0.08883 0.37955 0.08883 0.56529 0.15344l-0.41993 1.4213q-0.11306-0.0323-0.30688-0.0808-0.19381-0.0565-0.47646-0.0565-0.63798 0-0.92063 0.32303-0.28265 0.31495-0.28265 0.92063v0.79949h1.9624v1.4132h-1.9624v7.6154zm5.1927 0.11306q-0.49262 0-0.83987-0.33918-0.33918-0.33918-0.33918-0.8318 0-0.49261 0.33918-0.83179 0.34725-0.33918 0.83987-0.33918t0.8318 0.33918q0.34725 0.33918 0.34725 0.83179 0 0.49262-0.34725 0.8318-0.33918 0.33918-0.8318 0.33918zm-133.21-24.769v1.4132h-1.8574v4.9665q0 1.1952 1.0902 1.1952 0.28265 0 0.61375-0.06461l0.3311 1.4536q-0.56529 0.18574-1.2114 0.18574-1.171 0-1.8736-0.65413-0.70258-0.66221-0.70258-1.7605v-5.3219h-1.3163v-1.4132h1.3163v-2.1481h1.7524v2.1481zm3.198 9.0286-2.6488-9.0286h1.809l1.7686 6.6301h0.0969l1.7686-6.6301h1.817l1.7524 6.6059h0.0888l1.7605-6.6059h1.809l-2.6488 9.0286h-1.7847l-1.8412-6.509h-0.12114l-1.8413 6.509zm14.609 0.18574q-1.3325 0-2.3016-0.57337-0.96101-0.58145-1.4859-1.6232-0.51684-1.0418-0.51684-2.4389 0-1.389 0.50877-2.4469 0.51684-1.0579 1.4456-1.6474 0.93678-0.5976 2.1966-0.5976 1.0256 0 1.9462 0.46031 0.92063 0.45224 1.494 1.4536 0.58145 0.99331 0.58145 2.6165v0.6299h-6.4202q0.0485 1.3083 0.75104 2.0189 0.70259 0.70258 1.817 0.70258 0.74296 0 1.284-0.32303 0.54107-0.3311 0.78334-0.97716l1.6636 0.31495q-0.2988 1.0902-1.2921 1.7605-0.98524 0.67028-2.455 0.67028zm-0.15344-7.8738q-1.066 0-1.6959 0.71066-0.62183 0.70258-0.69451 1.6797h4.6758q-0.0969-1.066-0.67028-1.7282-0.57337-0.66221-1.6151-0.66221zm7.8657 7.8819q-0.85602 0-1.5505-0.31495t-1.0983-0.9287q-0.40378-0.61375-0.40378-1.5021 0-0.76719 0.29072-1.2598 0.2988-0.49262 0.7995-0.77527 0.50069-0.29072 1.1144-0.43609 0.62183-0.14536 1.2598-0.22612 0.80757-0.08883 1.3083-0.15344 0.50877-0.06461 0.73489-0.20189 0.23419-0.13729 0.23419-0.46031v-0.04038q0-0.76719-0.43609-1.1871-0.42801-0.41994-1.276-0.41994-0.88833 0-1.3971 0.38763-0.50877 0.38763-0.70258 0.8641l-1.6555-0.37956q0.44417-1.2275 1.4698-1.7605 1.0337-0.54107 2.2531-0.54107 0.54107 0 1.1468 0.12921 0.61375 0.12114 1.1468 0.46031 0.53299 0.33918 0.87217 0.96101 0.33918 0.61375 0.33918 1.599v5.9922h-1.7201v-1.2356h-0.0646q-0.25034 0.50069-0.8964 0.96908-0.64605 0.46031-1.7686 0.46031zm0.37955-1.4052q0.73489 0 1.2517-0.28265 0.51684-0.29072 0.79141-0.75911 0.27458-0.46839 0.27458-0.99331v-1.171q-0.12922 0.12114-0.54107 0.21804-0.41186 0.09691-0.88025 0.16151-0.46839 0.06461-0.75104 0.09691-0.75912 0.10498-1.3083 0.41186-0.54915 0.2988-0.54915 1.0014 0 0.65413 0.48454 0.98523t1.2275 0.3311zm5.7499 1.2114v-12.033h1.7444v6.832h0.16151l3.5937-3.8279h2.0997l-3.6502 3.8844 3.9006 5.1442h-2.1643l-3.0688-4.0701-0.87217 0.87217v3.198zm-33.902-27.66v12.033h-1.817v-12.033zm7.2358 0v12.033h-1.7443v-12.033zm1.6798 12.033v-9.0286h1.7443v9.0286zm0.88025-10.418q-0.46032 0-0.78335-0.30688-0.32302-0.30688-0.32302-0.73489 0-0.43609 0.32302-0.74296 0.32303-0.30688 0.78335-0.30688 0.45223 0 0.77526 0.30688 0.3311 0.30688 0.3311 0.74296 0 0.42801-0.3311 0.73489-0.32303 0.30688-0.77526 0.30688zm2.5438 10.418v-12.033h1.7443v6.832h0.16152l3.5937-3.8279h2.0997l-3.6502 3.8844 3.9006 5.1442h-2.1643l-3.0688-4.0701-0.87218 0.87217v3.198zm12.017 0.18574q-1.3325 0-2.3016-0.57337-0.961-0.58145-1.4859-1.6232-0.51685-1.0418-0.51685-2.4389 0-1.389 0.50877-2.4469 0.51685-1.0579 1.4456-1.6474 0.93678-0.5976 2.1966-0.5976 1.0256 0 1.9462 0.46031 0.92063 0.45224 1.494 1.4536 0.58145 0.99331 0.58145 2.6165v0.6299h-6.4202q0.0485 1.3083 0.75104 2.0189 0.70258 0.70258 1.817 0.70258 0.74297 0 1.284-0.32303 0.54107-0.3311 0.78334-0.97716l1.6636 0.31495q-0.2988 1.0902-1.2921 1.7605-0.98523 0.67028-2.455 0.67028zm-0.15344-7.8738q-1.066 0-1.6959 0.71066-0.62183 0.70258-0.69451 1.6797h4.6758q-0.0969-1.066-0.67028-1.7282-0.57337-0.66221-1.6151-0.66221zm13.131-1.3406v1.4132h-1.8574v4.9665q0 1.1952 1.0902 1.1952 0.28265 0 0.61375-0.06461l0.3311 1.4536q-0.5653 0.18574-1.2114 0.18574-1.171 0-1.8736-0.65413-0.70258-0.66221-0.70258-1.7605v-5.3219h-1.3163v-1.4132h1.3163v-2.1481h1.7524v2.1481zm4.9504 9.2144q-1.2679 0-2.2127-0.58145-0.94485-0.58145-1.4698-1.6232-0.52492-1.0498-0.52492-2.4469 0-1.4052 0.52492-2.455 0.52492-1.0579 1.4698-1.6394 0.94486-0.58145 2.2127-0.58145t2.2127 0.58145q0.95293 0.58145 1.4778 1.6394 0.52492 1.0498 0.52492 2.455 0 1.3971-0.52492 2.4469-0.52492 1.0418-1.4778 1.6232-0.94486 0.58145-2.2127 0.58145zm0-1.4778q0.8318 0 1.3729-0.43609t0.79949-1.1548q0.2665-0.72681 0.2665-1.5828 0-0.87217-0.2665-1.599-0.25842-0.72681-0.79949-1.1629-0.54107-0.43609-1.3729-0.43609-0.82372 0-1.3648 0.43609-0.54107 0.43609-0.80757 1.1629-0.25842 0.72681-0.25842 1.599 0 0.85602 0.25842 1.5828 0.2665 0.71874 0.80757 1.1548t1.3648 0.43609zm-41.759-41.996v12.033h-2.5358v-12.033zm2.3823 5.0392-0.25035-5.0392h2.3904l-0.24227 5.0392zm4.2317 6.9935v-9.0286h2.3662v1.6071h0.11306q0.28265-0.79949 0.94486-1.2598 0.6622-0.46031 1.5748-0.46031 0.92871 0 1.5748 0.46839 0.65413 0.46031 0.87218 1.2517h0.0969q0.27458-0.78334 0.99331-1.2517 0.72681-0.46839 1.7201-0.46839 1.2598 0 2.0512 0.80757 0.79949 0.79949 0.79949 2.2612v6.0729h-2.5035v-5.5722q0-0.75911-0.40379-1.1306-0.3957-0.37148-0.9933-0.37148-0.67836 0-1.066 0.43609-0.37955 0.42801-0.37955 1.1306v5.5076h-2.4227v-5.6368q0-0.65413-0.37955-1.0418-0.37956-0.39571-0.99331-0.39571-0.62991 0-1.0498 0.46031-0.41994 0.45224-0.41994 1.2033v5.4107zm17.452-9.9331v-2.0997h9.8846v2.0997h-3.6825v9.9331h-2.5115v-9.9331zm13.43 4.7162v5.2169h-2.4954v-12.033h2.4146v4.6112h0.11306q0.31495-0.79949 0.99331-1.2598t1.704-0.46031q1.4132 0 2.2693 0.90448 0.85602 0.90448 0.85602 2.4954v5.7418h-2.5035v-5.2976q0-0.8318-0.42801-1.3002-0.41994-0.46839-1.1871-0.46839t-1.2517 0.49262q-0.48454 0.48454-0.48454 1.3567zm11.435 5.3946q-1.3971 0-2.3985-0.5653-1.0014-0.5653-1.5425-1.6071-0.54107-1.0418-0.54107-2.4792 0-1.389 0.533-2.4389 0.54107-1.0498 1.5182-1.6394t2.3096-0.58952q1.1952 0 2.1562 0.50877 0.96908 0.50877 1.5344 1.5263t0.5653 2.5519v0.67836h-6.1456q0.0404 1.0337 0.5976 1.6151 0.55723 0.57337 1.4456 0.57337 0.6299 0 1.0741-0.2665 0.45224-0.2665 0.63798-0.77526l2.3096 0.15344q-0.25842 1.2517-1.3244 2.0028-1.066 0.75104-2.7296 0.75104zm-0.10499-7.4539q-0.83987 0-1.3325 0.52492-0.48454 0.51684-0.5653 1.3325h3.739q-0.0888-0.85602-0.54915-1.3567-0.46031-0.50069-1.2921-0.50069zm9.3678 7.4539q-1.3648 0-2.3662-0.58145-0.99331-0.58952-1.5344-1.6313-0.533-1.0498-0.533-2.4389 0-1.3971 0.533-2.4469 0.54107-1.0498 1.5344-1.6313 1.0014-0.58952 2.3662-0.58952 1.3729 0 2.3662 0.58952 1.0014 0.58145 1.5344 1.6313 0.54107 1.0498 0.54107 2.4469 0 1.389-0.54107 2.4389-0.533 1.0418-1.5344 1.6313-0.99331 0.58145-2.3662 0.58145zm0.0162-1.9543q0.9287 0 1.4052-0.76719 0.48455-0.76719 0.48455-1.9462t-0.48455-1.9382q-0.47646-0.75911-1.4052-0.75911-0.94486 0-1.4294 0.75911-0.47647 0.75911-0.47647 1.9382t0.47647 1.9462q0.48454 0.76719 1.4294 0.76719zm7.3166 1.9301q-0.5976 0-1.0095-0.40378-0.41186-0.40378-0.41186-1.0014 0-0.5976 0.41186-1.0014t1.0095-0.40378 1.0095 0.40378 0.41186 1.0014q0 0.5976-0.41186 1.0014-0.41186 0.40378-1.0095 0.40378zm-68.062-15.781v-12.033h2.5358v4.9665h5.1684v-4.9665h2.5358v12.033h-2.5358v-4.9746h-5.1684v4.9746zm11.75 0v-9.0286h2.4954v9.0286zm1.2436-10.183q-0.55722 0-0.95293-0.36341-0.39571-0.37148-0.39571-0.90448 0-0.52492 0.39571-0.88833 0.39571-0.37148 0.95293-0.37148 0.5653 0 0.96101 0.37148 0.39571 0.36341 0.39571 0.88833 0 0.533-0.39571 0.90448-0.39571 0.36341-0.96101 0.36341zm2.665 13.389 0.71066-5.0392h2.4873l-1.5102 5.0392z" fill="#fff" stroke="#fff" stroke-linecap="square" stroke-miterlimit="6.7" stroke-width=".15628" style="paint-order:fill markers stroke"/>
 <script id="mesh_polyfill" type="text/javascript">!function(){const t="http://www.w3.org/2000/svg",e="http://www.w3.org/1999/xlink",s="http://www.w3.org/1999/xhtml",r=2;if(document.createElementNS(t,"meshgradient").x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case"translate":2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error("mesh.js: translate does not have 2 arguments!"),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case"scale":1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error("mesh.js: scale does not have 1 or 2 arguments!"),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case"rotate":if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error("math.js: No argument to rotate transform!");3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case"skewX":l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error("math.js: No argument to skewX transform!");break;case"skewY":l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error("math.js: No argument to skewY transform!");break;case"matrix":6===l.length?h=h.append(new g(...l)):console.error("math.js: Incorrect number of arguments for matrix!");break;default:console.error("mesh.js: Unhandled transform type: "+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error("mesh.js: argument to Affine.append is not affine!");let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute("type")||"bilinear"}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute("x")),n=Number(t.getAttribute("y"));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute("path"),c="l";null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case"l":0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case"L":0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case"c":0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case"C":0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error("mesh.js: "+c+" invalid path type.")}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if("bilinear"===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll("rect,circle,ellipse,path,text").forEach((r,n)=&gt;{let o=r.getAttribute("id");o||(o="patchjs_shape"+n,r.setAttribute("id",o));const i=r.style.fill.match(/^url\(\s*"?\s*#([^\s"]+)"?\s*\)/),a=r.style.stroke.match(/^url\(\s*"?\s*#([^\s"]+)"?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;"meshgradient"===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,"canvas");d(l,{width:i.width,height:i.height});const c=l.getContext("2d");let u=c.createImageData(i.width,i.height);const f=new b(a);"objectBoundingBox"===a.getAttribute("gradientUnits")&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute("gradientTransform");null!=p&amp;&amp;f.transform(h(p)),"userSpaceOnUse"===a.getAttribute("gradientUnits")&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,"image");d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,"xlink:href",g),r.parentNode.insertBefore(y,r),r.style.fill="none";const w=document.createElementNS(t,"use");w.setAttributeNS(e,"xlink:href","#"+o);const m="patchjs_clip"+n,M=document.createElementNS(t,"clipPath");M.setAttribute("id",m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute("clip-path","url(#"+m+")"),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;"meshgradient"===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute("stroke-miterlimit"))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,"canvas");d(p,{width:l,height:c});const y=p.getContext("2d");let g=y.createImageData(l,c);const w=new b(o);"objectBoundingBox"===o.getAttribute("gradientUnits")&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute("gradientTransform");null!=m&amp;&amp;w.transform(h(m)),"userSpaceOnUse"===o.getAttribute("gradientUnits")&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,"image");d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,"xlink:href",S);const k="pattern_clip"+n,A=document.createElementNS(t,"pattern");d(A,{id:k,patternUnits:"userSpaceOnUse",width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke="url(#"+k+")",g=null,p=null,S=null}}})}();</script>
 <script type="text/javascript">!function(){const t="http://www.w3.org/2000/svg",e="http://www.w3.org/1999/xlink",s="http://www.w3.org/1999/xhtml",r=2;if(document.createElementNS(t,"meshgradient").x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case"translate":2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error("mesh.js: translate does not have 2 arguments!"),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case"scale":1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error("mesh.js: scale does not have 1 or 2 arguments!"),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case"rotate":if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error("math.js: No argument to rotate transform!");3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case"skewX":l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error("math.js: No argument to skewX transform!");break;case"skewY":l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error("math.js: No argument to skewY transform!");break;case"matrix":6===l.length?h=h.append(new g(...l)):console.error("math.js: Incorrect number of arguments for matrix!");break;default:console.error("mesh.js: Unhandled transform type: "+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error("mesh.js: argument to Affine.append is not affine!");let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute("type")||"bilinear"}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute("x")),n=Number(t.getAttribute("y"));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute("path"),c="l";null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case"l":0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case"L":0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case"c":0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case"C":0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error("mesh.js: "+c+" invalid path type.")}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if("bilinear"===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll("rect,circle,ellipse,path,text").forEach((r,n)=&gt;{let o=r.getAttribute("id");o||(o="patchjs_shape"+n,r.setAttribute("id",o));const i=r.style.fill.match(/^url\(\s*"?\s*#([^\s"]+)"?\s*\)/),a=r.style.stroke.match(/^url\(\s*"?\s*#([^\s"]+)"?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;"meshgradient"===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,"canvas");d(l,{width:i.width,height:i.height});const c=l.getContext("2d");let u=c.createImageData(i.width,i.height);const f=new b(a);"objectBoundingBox"===a.getAttribute("gradientUnits")&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute("gradientTransform");null!=p&amp;&amp;f.transform(h(p)),"userSpaceOnUse"===a.getAttribute("gradientUnits")&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,"image");d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,"xlink:href",g),r.parentNode.insertBefore(y,r),r.style.fill="none";const w=document.createElementNS(t,"use");w.setAttributeNS(e,"xlink:href","#"+o);const m="patchjs_clip"+n,M=document.createElementNS(t,"clipPath");M.setAttribute("id",m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute("clip-path","url(#"+m+")"),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;"meshgradient"===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute("stroke-miterlimit"))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,"canvas");d(p,{width:l,height:c});const y=p.getContext("2d");let g=y.createImageData(l,c);const w=new b(o);"objectBoundingBox"===o.getAttribute("gradientUnits")&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute("gradientTransform");null!=m&amp;&amp;w.transform(h(m)),"userSpaceOnUse"===o.getAttribute("gradientUnits")&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,"image");d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,"xlink:href",S);const k="pattern_clip"+n,A=document.createElementNS(t,"pattern");d(A,{id:k,patternUnits:"userSpaceOnUse",width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke="url(#"+k+")",g=null,p=null,S=null}}})}();</script>
</svg>
