<svg width="1200" height="500" version="1.1" viewBox="0 0 317.5 132.29" xmlns="http://www.w3.org/2000/svg"><defs><linearGradient id="linearGradient2" x1="152.49" x2="177.02" y1="26.52" y2="125.65" gradientUnits="userSpaceOnUse"><stop stop-color="#1a1a1a" offset="0"/><stop stop-color="#222" offset="1"/></linearGradient></defs><rect width="317.5" height="132.29" ry="8.7614" fill="url(#linearGradient2)" style="paint-order:stroke fill markers"/><path transform="matrix(.66295 -.058438 .060546 .63986 312.17 74.863)" d="m-346.12-26.702-5.7644-0.91913 2.5715 36.048 5.8009-1.6052zm2.5436 35.477-5.8012 1.6052 0.84968 10.92 6.2769 2.91zm-10.11-30.984-16.03 7.2442-0.32637 0.84184-4.8991 12.656 23.064 9.2274zm-4.0186 6.6575 1.0046 16.631-12.552-5.0221 2.9989-7.7454zm-45.361-25.725 1.0103 45.455 4.4106-0.097363-0.85618-38.458 6.9141 3.1197-1.9112 36.446 16.128-6.5206 8.8164-24.371zm15.795 11.967 13.18 5.9474-6.7579 18.678-7.8806 3.1865zm61.58-37.922 0.36193 18.495 4.3642 2.2194-0.75656-12.967 9.3267 6.2222 3.5135 21.041-11.251 1.1469-0.88401-13.127-4.4302-2.2792 0.43363 20.339 21.257-2.1684-4.6111-27.617zm-1.846 4.7078-21.15 8.4852-4.9106 7.4488 21.714-9.382-0.0747 22.992-7.4842-5.8986 0.44452 5.9956 11.323 8.8957zm-49.153 7.8813-1.2652 22.12 4.3606 2.144 12.969-4.7406-1.1943-4.2466-10.757 3.0247 0.61202-12.603 11.179 2.9285 1.1187-4.2673zm33.025-18.063-18.551 3.1777c0.0343 12.361-0.42753 25.854-0.39319 38.214l22.461 3.04zm-3.9956 5.4276 2.6831 33.899-13.231-1.7905 0.57364-30.43zm-39.802-9.3551-3.8468 13.557 16.591 4.8201 2.3455-17.186-4.0981 0.6719-1.6114 11.026-8.0897-2.2454 2.2959-7.8271zm-17.564 1.8314-11.5 10.35 2.9509 3.2797 9.8952-8.9051 5.2323 0.93986-8.6672 23.405 27.075 12.023 1.5394-26.624-4.4048-0.25444-1.1706 20.259-17.464-7.755 9.0585-24.464zm-9.5261 1.9965-20.483 5.8036 11.764 29.577 2.7814-6.5613-8.6386-20.103 10.965-3.1073 3.792 25.007 5.0054 4.1107zm74.993-30.666-27.098 25.591 2.6094 3.4585 27.098-25.591zm-4.9738-10.715-19.341 9.4521-0.21397 1.1479-6.1333 32.989 35.101-5.8793-0.73663-26.557zm-1.1439 5.3658 5.8882 7.568 0.58204 20.989-25.98 4.3507 4.7805-25.71zm-34.456 2.2333-6.0946 4.2523 0.17317-3.4923-22.671-2.0705-1.1834 18.454-1.1986 16.902 4.7858-3.9172 0.81514-12.702 0.89351-13.931 13.943 1.2734-4.0273 26.495 4.6782 0.93227s2.2754-14.818 3.6899-22.492l7.0892-4.9469 7.3662 1.7888-4.4016 22.69 4.7466-0.6607 4.7773-25.325zm35.347-9.9023c-0.26047 0.0282-0.51877 0.10065-0.76477 0.22084l-19.343 9.4533-2e-3 1e-3c-0.53571 0.27135-0.89586 0.76029-1.093 1.3189-0.0653-0.0287-0.1265-0.0663-0.19426-0.0889l-0.0105-3e-3 -13.393-3.2523c-0.64604-0.15703-1.3289-0.0288-1.8741 0.35171l-2.5601 1.7872c-0.32793-0.76128-0.9773-1.3466-1.8199-1.4344h-2e-3l-22.673-2.0714c-1.2959-0.11837-2.4399 0.86172-2.5233 2.1604l-1.1819 18.447-1.0746 15.141c-0.5231-0.44178-1.1738-0.71166-1.8659-0.5838l-0.0113 0.0021-20.495 5.8083c-1.3179 0.37319-2.0283 1.8139-1.5224 3.0867l11.764 29.576c0.37842 0.95255 1.2565 1.4522 2.1287 1.4621 0.87212 0.0098 1.7605-0.47024 2.1604-1.414l2.781-6.5619c0.24656-0.58179 0.2444-1.2394-5e-3 -1.8199l-7.5966-17.678 5.8973-1.6706 3.3965 22.406c0.0858 0.56616 0.37852 1.0812 0.82101 1.4447l5.0058 4.1111c0.81035 0.66487 1.8416 0.66139 2.6133 0.22391 0.77168-0.43748 1.3035-1.3209 1.1492-2.3577l-0.76067-5.0947 2.9446 1.3077c-0.21066 0.28659-0.42573 0.5779-0.4877 0.93142l-4e-3 0.02556 1.0101 45.481c0.0284 1.2766 1.0923 2.2938 2.3689 2.2657l4.4107-0.097133c0.7825-0.017012 1.4324-0.44749 1.8393-1.0531 0.11476 1.5238 1.6575 2.5838 3.1255 1.9906l16.158-6.5312 0.0266-0.019418c0.13655-0.099361 0.23721-0.23586 0.34865-0.36194 0.0779 0.076825 0.14693 0.16281 0.23515 0.228l0.0266 0.019418 23.104 9.2437 8e-3 0.0021c0.49082 0.15968 0.99832 0.09468 1.4753-0.07463-0.15379 0.19853-0.34546 0.37083-0.42838 0.61038l-0.0174 0.05214 0.85371 10.975c0.0652 0.83467 0.57577 1.5699 1.3353 1.9221l6.2766 2.9098c1.6037 0.7437 3.4357-0.53909 3.285-2.3004l-1.3281-15.472-0.0133-0.03371c-0.0671-0.17622-0.17389-0.33217-0.28117-0.48667 0.2558-0.4137 0.39849-0.88897 0.36296-1.3772l-2.5724-33.065 3.3136 0.44884c1.4592 0.19775 2.7379-1.0124 2.6215-2.4804l-0.048-0.60732 8.7805 6.8982c1.5042 1.1807 3.7416 0.0985 3.7492-1.8138v-0.02556c0.17439 0.06215 0.34037 0.1507 0.52552 0.16972l0.0266 0.0021 21.284-2.1706c1.3278-0.13522 2.2717-1.3715 2.052-2.6879l-4.6121-27.616c-0.10689-0.63947-0.4763-1.205-1.0193-1.5592l-17.324-11.306c-1.5463-1.0091-3.6201 0.13943-3.5846 1.9855l0.048 2.4773c-0.13236 0.0044-0.26564-0.0054-0.39568 0.02147l-0.0225 0.0051-11.947 4.7931-1.0316-13.038-0.0154-0.03783c-0.015-0.03705-0.0394-0.06911-0.0563-0.10531l6.6907-1.1206c1.1387-0.19085 1.9663-1.1953 1.9344-2.3495l-0.73716-26.556c-0.0137-0.49327-0.18469-0.96931-0.4877-1.3588l-8.6762-11.153c-0.50441-0.64823-1.3002-0.96505-2.0816-0.8803zm0.6574 0.55415c0.39016 0.0904 0.74999 0.31154 1.0112 0.64719l8.6762 11.153c0.2346 0.30157 0.36664 0.67013 0.37727 1.0521l0.73716 26.556c0.0248 0.89702-0.61181 1.6716-1.4968 1.8199l-7.4565 1.2484 0.23413 0.33944c0.0698 0.10096 0.12709 0.21008 0.17484 0.32308l1.0797 13.656 12.554-5.0364c0.17098-0.03419 0.34575-0.04494 0.5194-0.02863l0.2924 0.02761-0.0593-3.0202c-0.028-1.4556 1.5556-2.3334 2.7748-1.5377l17.324 11.306c0.42061 0.27432 0.70754 0.71219 0.79033 1.2075h-1e-3l4.6111 27.616c0.17123 1.0258-0.5532 1.9753-1.5878 2.0806l-21.217 2.1645c-0.24486-0.0271-0.48246-0.1013-0.69626-0.22391l-0.39056-0.22391-2e-3 0.82714c-6e-3 1.5108-1.7142 2.3377-2.9026 1.4048l-9.7191-7.6364 0.14211 1.7974c0.0909 1.1467-0.89063 2.0746-2.0305 1.9201l-3.9557-0.53472 2.6235 33.71c0.0308 0.42599-0.0914 0.84812-0.34455 1.1921l-0.12065 0.16359 0.12883 0.15745c0.11675 0.14298 0.20713 0.30489 0.27503 0.47644l1.321 15.385c0.11854 1.3856-1.2811 2.3661-2.5428 1.781l-6.2766-2.9098c-0.5887-0.273-0.98417-0.84168-1.0347-1.4886l-0.8435-10.842c0.11178-0.30393 0.29587-0.57724 0.54802-0.78113l0.18097-0.1462-0.12474-0.19733c-0.032-0.05057-0.0611-0.10294-0.0879-0.15642l-0.1319-0.26276-0.24538 0.16154c-0.45385 0.2972-1.0174 0.37178-1.5336 0.20551l-23.011-9.2058c-0.12218-0.09277-0.2345-0.19825-0.32922-0.319l-0.22187-0.28321-0.20141 0.29854c-0.11386 0.16977-0.25826 0.31672-0.42226 0.43862l-16.085 6.5026c-1.2263 0.4955-2.5326-0.43673-2.464-1.7575l1.8465-35.22-3.2002-1.4437 0.79237 35.611c0.0224 0.9945-0.76096 1.8126-1.7555 1.8342l-4.4107 0.097133c-0.99381 0.021887-1.8111-0.76066-1.8332-1.7545l-1.0091-45.414c0.0658-0.36273 0.2387-0.69767 0.50098-0.95698l0.27299-0.26992-3.7165-1.6502c-0.0653-0.05862-0.12799-0.12057-0.18404-0.18812l-0.59914-0.72183 0.99175 6.6396c0.12271 0.82417-0.28748 1.4831-0.89052 1.825-0.60305 0.34188-1.3792 0.35472-2.0234-0.17381l-5.0058-4.1111c-0.34266-0.28145-0.56852-0.67908-0.63492-1.1175l-3.4854-22.993-7.0414 1.9937 7.8317 18.226c0.19325 0.44962 0.19404 0.9583 3e-3 1.4089l-2.781 6.5619c-0.31733 0.74902-0.99159 1.1027-1.6727 1.095-0.68109-0.0076-1.3468-0.37684-1.6471-1.1328l-11.764-29.576c-0.39444-0.99234 0.15139-2.0984 1.1788-2.3894l20.46-5.7981h1e-3c0.68422-0.12599 1.3777 0.15325 1.7831 0.71876l0.42226 0.58993 1.1594-16.346 1.1819-18.45c0.065-1.0113 0.94564-1.7638 1.9549-1.6716l22.667 2.0714c0.7492 0.0781 1.3689 0.61332 1.5541 1.3434l0.093 0.36706 3.0887-2.1553c0.42231-0.29471 0.95041-0.39359 1.4508-0.27197l13.364 3.2452c0.12076 0.0406 0.23713 0.0933 0.3466 0.15847l0.31797 0.18915 0.0726-0.36296c0.10837-0.53937 0.45804-0.99875 0.94881-1.2474l19.337-9.4502c0.38213-0.18666 0.803-0.22736 1.1932-0.137zm-2.0704 9.3674-0.19016 0.093-12.418 6.068-2.8515 15.338 18.555-17.522zm-0.15132 0.65639 2.5407 3.2676-17.041 16.092 2.509-13.501zm-56.59 4.7736-0.0163 0.26891-0.75863 11.823-0.80362 12.512 8.2192 1.4764-0.1227-0.40897c-0.0175-0.05826-0.0304-0.11716-0.0419-0.17688l3.7339-24.563zm0.48769 0.57052 9.121 0.83224-3.651 24.023-6.9841-1.2545 0.77295-12.046zm23.575 0.6707-0.0961 0.0675-5.7061 3.9813-0.0195 0.10633c-1.1239 6.2306-2.2411 13.464-2.8311 17.259l-0.0521 0.33229 0.33535-0.0317c0.31857-0.03009 0.63865 0.02913 0.92835 0.16461l3.5509 2.7881c0.57794 0.45371 0.82024 1.212 0.61345 1.917l-1.7831 6.0793 4.3739 1.2136 1.3067-8.9451c0.16364-0.2989 0.40467-0.55001 0.70342-0.71467l0.31286-0.17279-0.2597-0.2464c-0.43445-0.41147-0.63529-1.0111-0.53575-1.6011 6e-5 -3.46e-4 -5e-5 -6.81e-4 0-1e-3l4.0743-21.003zm0.10532 0.56437 4.2011 1.0194-3.9803 20.522v0.0031c-0.11392 0.6728 0.1179 1.3318 0.55006 1.8485-0.28773 0.20775-0.56801 0.43251-0.73512 0.74841l-0.0214 0.03987-1.2371 8.4697-3.2901-0.91302 1.6338-5.5701c0.2666-0.90898-0.0483-1.8903-0.79339-2.4753l-3.6091-2.8352-0.0266-0.01227c-0.27781-0.1325-0.58733-0.14338-0.89258-0.15847 0.59259-3.8133 1.6725-10.792 2.7718-16.899zm37.406 5.9576-0.42533 0.40181-14.574 13.764 15.321-2.5652zm-0.49076 1.184 0.27707 9.9747-13.176 2.2074zm-23.796 13.792-0.13905 0.37932-1.3895 3.7778 4.5273-1.2381zm0.21266 0.93756 1.7647 1.7177-2.6644 0.72898zm1.4283 7.6426-0.30366 0.05112-5.5773 0.93449c-0.4062 0.0085-0.80368-0.11945-1.1267-0.36603l-0.35683-0.27298-1.5633 11.449c-0.18253 0.93711-1.0595 1.5649-2.006 1.4344l-0.10117 0.51325 10.867 2.783 5e-3 -0.33126c0.0867-5.3762 0.17769-10.759 0.16358-15.887zm-0.52553 0.61754c9e-3 4.9244-0.0741 10.077-0.15745 15.237l-9.0729-2.324c0.6664-0.30104 1.1967-0.87588 1.3434-1.642l2e-3 -0.0071 1.4641-10.724c0.34302 0.17706 0.69157 0.36179 1.0817 0.35274h0.0184zm-38.596 1.0449-0.0951 0.08589-7.7601 6.9831 2.0469 13.704 0.50406 0.05215 7.5618-20.421zm0.1595 0.56028 1.3905 0.24947-6.9913 18.879-1.8536-12.419zm10.428 0.3875-6.7275 18.167 13.555 6.019 0.94062-16.288-7.0322-2.0438c-0.95041-0.27603-1.4958-1.2604-1.2259-2.2125l0.9805-3.4599 6e-3 -0.01943zm43.251 2.0244-0.2822 0.04805-6.2919 1.0592-0.51632 27.342 9.443 1.278-0.92222-11.658-5.0211 2.1696c-0.83348 0.3601-1.6119 0.07107-2.0857-0.49383-0.47384-0.5649-0.62334-1.3828-0.12372-2.1409l4.9107-7.4483c0.20124-0.30498 0.49006-0.54082 0.82918-0.67684l0.78625-0.31695zm-0.47645 0.61038 0.65026 8.211-0.42942 0.17279c-0.4374 0.17576-0.81186 0.48069-1.0715 0.87417l-4.9107 7.4483c-0.0603 0.09144-0.0791 0.18843-0.12473 0.28219l0.30366-16.048zm-43.835 1.7361c0.0963 0.90925 0.72182 1.7166 1.6512 1.9866l6.6314 1.9273-0.87417 15.116-12.413-5.5118zm16.709 5.8155-0.0174 0.33024-0.0255 0.49587 0.34762-0.09406c0.0815-0.02187 0.16473-0.03784 0.24844-0.04805l0.0419-0.51121zm57.177 1.0286 0.0306 0.5245 0.51529 8.8367c5e-3 0.47979-0.18066 0.94214-0.51835 1.2831l-0.19018 0.19221 0.19836 0.18403c0.20886 0.19339 0.3655 0.43523 0.46315 0.7024l0.75454 11.222 7.5004-0.76579-3.0693-18.387zm0.58481 1.0183 4.6213 3.0826 2.9394 17.614-6.4065 0.65332-0.7249-10.769-0.0122-0.03374c-0.0991-0.28045-0.28689-0.51305-0.48258-0.73512 0.3432-0.42001 0.55811-0.93146 0.55109-1.4784v-0.0062zm-14.551 1.7361-0.36705 0.15848-6.0517 2.6143 0.8067 10.188 0.27298-0.03578c0.25106-0.03278 0.5051-0.0063 0.74738 0.06646l4.5375 3.5764zm-0.52552 0.79749-0.048 14.695-3.784-2.9824-0.045-0.01431c-0.23457-0.07474-0.48193-0.06758-0.72693-0.06543l-0.73717-9.3265zm-36.066 5.792-0.0163 0.32308-0.36807 7.5822 6.3533-1.7872 2e-3 -0.1963c0.0117-1.3709 0.0266-2.7515 0.0429-4.1398l2e-3 -0.20448zm21.949 0.30672 0.81385 10.281-8.3388-1.1287 0.16359-8.6711c0.0946 0.26234 0.13992 0.5486 0.31695 0.75966 0.60463 0.72083 1.6544 1.0881 2.6961 0.63799zm-21.457 0.36398 4.9965 1.3097c-0.0147 1.2536-0.0279 2.5013-0.0388 3.741l-5.2757 1.4835zm5.4525 14.124-0.42022 0.15438-7.0291 2.5693 3.969 1.7913c0.85674 0.38668 1.2684 1.3623 0.9488 2.2462l-2.9701 8.2121 15.363-6.9443c0.2389-0.03263 0.4819-0.0205 0.71467 0.04294l0.35579 0.09713-0.26787-3.7574c0.0408-0.16102 0.0997-0.31733 0.18301-0.46111l0.19631-0.3374-9.9542-1.3475 0.10838 0.38341c0.0742 0.26426 0.0876 0.39152 0.11246 0.54393-0.0801-0.09658-0.15738-0.18458-0.25049-0.32002-0.27732-0.40339-0.58421-0.94119-0.80771-1.4222-0.11175-0.2405-0.20214-0.46752-0.25867-0.65128-0.0565-0.18376-0.0683-0.33377-0.0645-0.35785zm-0.53575 0.7525c0.0156 0.06725 5e-3 0.12694 0.0276 0.20039 0.0671 0.21804 0.16648 0.46213 0.28526 0.71774 0.23753 0.51122 0.55277 1.0656 0.85064 1.4989 0.14894 0.21665 0.29257 0.40222 0.42839 0.5429 0.0679 0.07034 0.13268 0.13041 0.20653 0.17892 0.0739 0.04851 0.16175 0.09935 0.29651 0.08486 0.13475-0.01449 0.25633-0.14056 0.29342-0.24231 0.0371-0.10176 0.0394-0.1945 0.0338-0.30468-6e-3 -0.12962-0.0679-0.35358-0.1094-0.54188l8.4799 1.1472c-0.0362 0.0949-0.089 0.1831-0.11246 0.28219l-9e-3 0.03886 0.22801 3.191c-0.20024-0.02289-0.39982-0.06551-0.60016-0.03578l-0.0358 0.0051-14.315 6.4699 2.5489-7.0465c0.41094-1.1366-0.12531-2.4034-1.2269-2.9006l-2.8004-1.2637zm-31.231 0.34967 2.1164 0.95494-1.4712 28.052zm10.484 4.1571-0.0205 0.38238-1.1533 21.995 4.5273-1.8301 5.9198-16.364zm0.48258 0.79135 8.1344 3.6705-5.6765 15.687-3.5478 1.4355zm25.797 12.959-0.34557 0.15643-5.1622 2.3321-2.0929 5.4065 8.2775 3.3116zm-0.47746 0.7893 0.58175 9.624-7.0301-2.8127 1.8291-4.7236z" color="#000000" fill="#f2f2f2" style="-inkscape-stroke:none;paint-order:markers fill stroke"/><path d="m141.3 20.72c-0.37148 0-0.68911 0.1239-0.95291 0.37155-0.26381 0.24227-0.39585 0.53837-0.39585 0.88832 0 0.35533 0.13204 0.65668 0.39585 0.90434 0.2638 0.24227 0.58143 0.3638 0.95291 0.3638 0.37687 0 0.69737-0.12153 0.96118-0.3638 0.26381-0.24765 0.39533-0.549 0.39533-0.90434 0-0.34995-0.13152-0.64604-0.39533-0.88832-0.26381-0.24765-0.58431-0.37155-0.96118-0.37155zm-12.994 0.678v12.033h2.5358v-4.9744h5.1682v4.9744h2.5358v-12.033h-2.5358v4.9661h-5.1682v-4.9661h-2.5358zm11.75 3.0045v9.0284h2.4954v-9.0284h-2.4954zm4.6194 7.1949-0.71055 5.0395h1.6878l1.51-5.0395h-2.4872zm-16.37 5.4281v12.033h2.5358v-12.033h-2.5358zm4.6679 0 0.25012 5.0395h1.8981l0.24185-5.0395h-2.39zm21.934 0v2.0996h3.6902v9.9332h2.5115v-9.9332h3.683v-2.0996h-9.8847zm10.934 0v12.033h2.4954v-5.2167-5.17e-4c0-0.58144 0.1617-1.0335 0.48473-1.3565 0.32303-0.32841 0.74016-0.49248 1.2516-0.49248s0.90705 0.15593 1.187 0.46819c0.28534 0.31227 0.4284 0.74565 0.4284 1.3002v5.2979h2.5032v-5.7418c0-1.0606-0.28508-1.8925-0.85576-2.4955-0.57073-0.60299-1.3275-0.90485-2.2696-0.90485-0.68376 0-1.2515 0.15356-1.7038 0.46044s-0.78325 0.72688-0.99322 1.2599h-0.11317v-4.6111h-2.4148zm-23.388 2.8913c-0.6084 0-1.1331 0.15356-1.5746 0.46044s-0.75621 0.72688-0.94465 1.2599h-0.11317v-1.6071h-2.3663v9.0284h2.4954v-5.4105c0-0.50071 0.14017-0.90205 0.42013-1.2035 0.27993-0.30687 0.62961-0.45992 1.0496-0.45992 0.40917 0 0.74018 0.13152 0.99322 0.39532 0.25304 0.25845 0.37982 0.60571 0.37982 1.0418v5.6369h2.4226v-5.5077c0-0.46839 0.12627-0.84534 0.3793-1.1307 0.25843-0.29073 0.61385-0.43563 1.0661-0.43563 0.3984 0 0.72942 0.12338 0.99322 0.37104 0.26919 0.24766 0.40411 0.62461 0.40411 1.1307v5.5723h2.5032v-6.073c0-0.97447-0.26644-1.7279-0.79943-2.2608-0.5276-0.53838-1.2112-0.8077-2.051-0.8077-0.66219 0-1.2358 0.15593-1.7203 0.46819-0.47915 0.31224-0.81017 0.72938-0.99322 1.2516h-0.09663c-0.14537-0.52759-0.43622-0.94473-0.8723-1.2516-0.43073-0.31226-0.95596-0.46819-1.5751-0.46819zm37.197 0c-0.88831-5.4e-5 -1.6585 0.19604-2.3099 0.58911s-1.1575 0.93983-1.5183 1.6397c-0.35533 0.69993-0.53278 1.5126-0.53278 2.4386 0 0.95827 0.18034 1.7849 0.54105 2.4794 0.36073 0.69453 0.87494 1.2303 1.5425 1.6071s1.4669 0.56534 2.3983 0.56534c1.1091 0 2.0189-0.25068 2.7296-0.75138 0.71065-0.50073 1.1522-1.168 1.3245-2.0025l-2.3094-0.15348c-0.12382 0.33917-0.33671 0.59748-0.6382 0.77515-0.29613 0.17767-0.65391 0.26665-1.0738 0.26665-0.59224 0-1.0744-0.19136-1.4459-0.57361-0.37147-0.3876-0.57045-0.92576-0.59738-1.6149h6.1454v-0.67851c1e-5 -1.0229-0.18846-1.8734-0.56534-2.5518-0.37688-0.67835-0.88822-1.1873-1.5343-1.5265-0.64066-0.33918-1.3591-0.5085-2.1559-0.5085zm9.3839 0c-0.90987 0-1.6987 0.19662-2.3663 0.58963-0.66222 0.38767-1.1736 0.93104-1.5343 1.6309-0.35533 0.69987-0.5333 1.5155-0.5333 2.4469 0 0.92607 0.17797 1.7393 0.5333 2.4391 0.36073 0.69452 0.87207 1.2384 1.5343 1.6314 0.6676 0.38763 1.4564 0.58136 2.3663 0.58136 0.91526 0 1.704-0.19373 2.3663-0.58136 0.6676-0.393 1.1789-0.93689 1.5343-1.6314 0.36072-0.69993 0.54106-1.5131 0.54106-2.4391 0-0.9314-0.18034-1.747-0.54106-2.4469-0.35533-0.6999-0.86667-1.2433-1.5343-1.6309-0.6622-0.39301-1.451-0.58963-2.3663-0.58963zm-9.3679 1.8655c0.55453 0 0.98504 0.16695 1.2919 0.50074 0.3069 0.33379 0.49012 0.78583 0.54932 1.3565h-3.7388c0.05384-0.54377 0.24232-0.98818 0.56534-1.3327 0.32842-0.34995 0.77231-0.52452 1.3322-0.52452zm9.3839 0.088883c0.61916 0 1.088 0.25305 1.4056 0.75913 0.32303 0.50613 0.4842 1.1519 0.4842 1.9379s-0.16117 1.4347-0.4842 1.9461c-0.31767 0.51146-0.78647 0.7674-1.4056 0.7674-0.62991 0-1.1064-0.25594-1.4294-0.7674-0.31765-0.51141-0.47646-1.1601-0.47646-1.9461s0.15881-1.4318 0.47646-1.9379c0.32302-0.50607 0.79946-0.75913 1.4294-0.75913zm7.3169 4.5305c-0.39842-1.3e-5 -0.73518 0.13439-1.0098 0.40359-0.27457 0.2692-0.41186 0.60309-0.41186 1.0015 0 0.39841 0.13729 0.7323 0.41186 1.0015 0.2746 0.26919 0.61136 0.40359 1.0098 0.40359 0.39843 0 0.73467-0.13441 1.0092-0.40359 0.27458-0.2692 0.41186-0.60309 0.41186-1.0015 0-0.39843-0.13728-0.73232-0.41186-1.0015-0.27457-0.26917-0.61081-0.40358-1.0092-0.40359zm-56.257 21.402c-0.30688 0-0.56806 0.10237-0.78342 0.30696-0.21534 0.20458-0.32297 0.45238-0.32297 0.74311 0 0.28534 0.10763 0.53025 0.32297 0.73484 0.21536 0.20459 0.47654 0.30696 0.78342 0.30696 0.30148 0 0.55979-0.10237 0.77514-0.30696 0.22074-0.20459 0.33125-0.4495 0.33125-0.73484 0-0.29072-0.11051-0.53852-0.33125-0.74311-0.21535-0.20459-0.47366-0.30696-0.77514-0.30696zm-11.613 0.47697v12.033h1.8169v-12.033h-1.8169zm7.3086 0v12.033h1.7441v-12.033h-1.7441zm6.8482 0v12.033l1.7441-5.17e-4v-3.1977l0.8723-0.8723 3.0685 4.07h2.1647l-3.9011-5.1439 3.6504-3.8845h-2.0996l-3.5936 3.8277h-0.16175v-6.8316h-1.7441zm21.384 0.85576v2.1482h-1.3162v1.4134h1.3162v5.3216c0 0.73219 0.23442 1.3191 0.7028 1.7606 0.4684 0.43609 1.0931 0.65422 1.8738 0.65422 0.43073 0 0.83443-0.062209 1.2113-0.18604l-0.33125-1.4531c-0.22073 0.043074-0.42548 0.064596-0.61392 0.064596-0.7268 0-1.0898-0.39848-1.0898-1.1953v-4.9666h1.8572v-1.4134h-1.8572v-2.1482h-1.7529zm-9.5209 2.0355c-0.83988 0-1.5722 0.19898-2.1968 0.59738-0.61916 0.393-1.1008 0.94218-1.4454 1.6474-0.33918 0.70527-0.50849 1.5209-0.50849 2.4469 0 0.9314 0.17219 1.7446 0.51676 2.4391 0.34993 0.6945 0.84503 1.2355 1.4857 1.6232 0.64606 0.38225 1.4133 0.57309 2.3017 0.57309 0.97984 0 1.7983-0.22339 2.4551-0.67024 0.6622-0.44687 1.0927-1.0338 1.2919-1.7606l-1.6635-0.31471c-0.16151 0.43071-0.4227 0.75647-0.78341 0.9772-0.36069 0.21535-0.78885 0.32298-1.2842 0.32298-0.74295 0-1.3486-0.23441-1.817-0.7028-0.46836-0.47373-0.71852-1.1468-0.75086-2.019h6.4203v-0.62942c0-1.0821-0.19424-1.9547-0.58187-2.6169-0.38225-0.66757-0.88022-1.1522-1.494-1.4537-0.61373-0.30687-1.2624-0.45992-1.9461-0.45992zm18.082 0c-0.84523 0-1.5829 0.19373-2.2128 0.58136-0.62992 0.38767-1.1197 0.93391-1.4697 1.6392-0.34995 0.69987-0.52503 1.5183-0.52503 2.4551 0 0.9314 0.17508 1.747 0.52503 2.4469 0.34996 0.6945 0.83978 1.2355 1.4697 1.6232 0.62986 0.38763 1.3675 0.58136 2.2128 0.58136 0.84523 0 1.5829-0.19373 2.2128-0.58136 0.63525-0.3876 1.1275-0.92862 1.4774-1.6232 0.34995-0.69987 0.52504-1.5155 0.52504-2.4469 0-0.9368-0.17509-1.7553-0.52504-2.4551-0.34991-0.7053-0.84214-1.2515-1.4774-1.6392-0.62991-0.38763-1.3676-0.58136-2.2128-0.58136zm-33.369 0.11266v9.0289h1.7441v-9.0289h-1.7441zm15.287 1.3405c0.69448 0 1.2326 0.22102 1.6149 0.66249 0.38225 0.44147 0.60616 1.0174 0.67076 1.7281h-4.6762c0.04845-0.65141 0.27997-1.2111 0.69453-1.6795 0.41993-0.47377 0.98535-0.71055 1.696-0.71055v-5.17e-4zm18.082 0.024805c0.55455 0 1.0118 0.14491 1.3725 0.43563 0.36071 0.29073 0.62767 0.6787 0.79995 1.1632 0.17766 0.48455 0.26613 1.0174 0.26613 1.5989 0 0.57066-0.08847 1.0983-0.26613 1.5828-0.17226 0.47914-0.43922 0.86424-0.79995 1.155-0.36074 0.29073-0.818 0.43615-1.3725 0.43615-0.54915-2e-5 -1.0041-0.14544-1.3648-0.43615-0.36072-0.29071-0.63004-0.67581-0.80771-1.155-0.17228-0.48452-0.25838-1.0122-0.25838-1.5828 0-0.58146 0.0861-1.1143 0.25838-1.5989 0.17767-0.48454 0.44699-0.87251 0.80771-1.1632 0.36072-0.29073 0.81562-0.43563 1.3648-0.43563zm-8.383 11.258v12.033l1.7446-5.17e-4v-3.1977l0.87229-0.8723 3.0686 4.07h2.1642l-3.9005-5.1439 3.6504-3.8845h-2.0996l-3.5936 3.8277h-0.16174v-6.8316h-1.7446zm-35.258 0.85576v2.1482h-1.3162v1.4134h1.3162v5.3216c0 0.73219 0.23389 1.3191 0.70228 1.7606 0.4684 0.43609 1.0931 0.65422 1.8738 0.65422 0.43074 0 0.83443-0.061692 1.2113-0.18552l-0.33124-1.4537c-0.22074 0.043073-0.42497 0.064595-0.6134 0.064595-0.7268 0-1.0904-0.39848-1.0904-1.1953v-4.9666h1.8573v-1.4134h-1.8573v-2.1482h-1.7523zm21.263 2.0355c-0.83988 0-1.5717 0.19898-2.1962 0.59738-0.61917 0.393-1.1014 0.94218-1.4459 1.6474-0.33918 0.70527-0.50849 1.5209-0.50849 2.4469 0 0.9314 0.1722 1.7446 0.51676 2.4391 0.34993 0.6945 0.84503 1.2355 1.4857 1.6232 0.64607 0.38225 1.4133 0.57309 2.3017 0.57309 0.97984 0 1.7983-0.22339 2.4551-0.67024 0.6622-0.44687 1.0927-1.0338 1.2919-1.7606l-1.6635-0.31471c-0.16151 0.43071-0.4227 0.75647-0.78341 0.9772-0.3607 0.21535-0.78886 0.32298-1.2842 0.32298-0.74294 0-1.3486-0.23441-1.817-0.7028-0.46836-0.47373-0.71852-1.1463-0.75085-2.0185h6.4203v-0.62994c0-1.0821-0.19425-1.9547-0.58188-2.6169-0.38225-0.66757-0.88021-1.1522-1.494-1.4537-0.61373-0.30687-1.2624-0.45992-1.9461-0.45992zm8.8108 0c-0.81293 0-1.564 0.18034-2.2531 0.54105-0.68376 0.35533-1.1741 0.94177-1.4702 1.7601l1.6557 0.37982c0.1292-0.31765 0.3631-0.60561 0.70228-0.86403 0.33918-0.25842 0.80511-0.38757 1.3973-0.38757 0.56533 0 0.99055 0.13965 1.2759 0.41961 0.29073 0.27994 0.43615 0.67606 0.43615 1.1875v0.040308c0 0.21535-0.07797 0.36839-0.23409 0.45992-0.15075 0.09152-0.39566 0.15898-0.73484 0.20206-0.33382 0.043073-0.77007 0.094259-1.3084 0.15348-0.42531 0.05384-0.84532 0.12944-1.2599 0.22634-0.40914 0.096913-0.78035 0.24182-1.1142 0.43563-0.3338 0.18843-0.60023 0.44725-0.79943 0.77566-0.19381 0.32841-0.29094 0.74841-0.29094 1.2599 0 0.59223 0.13441 1.0926 0.40359 1.5017 0.26922 0.40917 0.63566 0.71866 1.0986 0.92862 0.46298 0.20997 0.97961 0.31523 1.5503 0.31523 0.74836 0 1.3382-0.15356 1.7689-0.46044 0.43071-0.31226 0.72918-0.63514 0.89607-0.96893h0.0646v1.2356h1.7203v-5.9924c0-0.65683-0.11288-1.1897-0.339-1.5989-0.22612-0.41455-0.51697-0.73506-0.8723-0.96118-0.35537-0.22611-0.73753-0.37916-1.1467-0.45992-0.40382-0.08614-0.78599-0.12919-1.1467-0.12919zm-25.915 0.11266 2.6489 9.0289h1.7849l1.8412-6.5092h0.12092l1.8412 6.5092h1.7849l2.6489-9.0289h-1.8092l-1.7606 6.6063h-0.08888l-1.7524-6.6063h-1.817l-1.7684 6.6301h-0.09715l-1.7684-6.6301h-1.8092zm17.104 1.3405c0.69448 0 1.2332 0.22102 1.6154 0.66249 0.38226 0.44147 0.60565 1.0174 0.67025 1.7281h-4.6762c0.04845-0.65141 0.27997-1.2111 0.69453-1.6795 0.41993-0.47377 0.98535-0.71055 1.696-0.71055v-5.17e-4zm10.563 3.2711v1.171c0 0.34995-0.09187 0.68096-0.27492 0.99322-0.18305 0.31226-0.44661 0.56531-0.79117 0.75913-0.34454 0.18843-0.76167 0.28267-1.2516 0.28267h-5.2e-4c-0.4953 0-0.90429-0.11051-1.2273-0.33125-0.32303-0.22073-0.48473-0.54938-0.48473-0.98547 0-0.4684 0.18322-0.80177 0.54932-1.001 0.36612-0.20459 0.80237-0.34188 1.3084-0.41186 0.18843-0.021533 0.4386-0.054078 0.75086-0.097151 0.31226-0.043067 0.60599-0.096624 0.88057-0.16123 0.27456-0.0646 0.4549-0.13731 0.54105-0.21807zm79.206 7.4466c-0.47376 0-0.91529 0.094236-1.3245 0.28267-0.40378 0.18843-0.72955 0.46826-0.9772 0.83974-0.24766 0.37148-0.37155 0.83742-0.37155 1.3973v1.0496h-1.3891v1.4134h1.3891v7.6156h1.7441v-7.6156h1.9627v-1.4134h-1.9627v-0.79944c0-0.40378 0.09423-0.71039 0.28267-0.92035 0.18843-0.21536 0.49555-0.3235 0.92087-0.3235 0.18843 0 0.34725 0.01918 0.47646 0.05685 0.12921 0.03233 0.23158 0.05908 0.30696 0.08061l0.41961-1.4211c-0.12383-0.043073-0.31179-0.094259-0.56482-0.15348-0.24766-0.05922-0.5519-0.088883-0.91261-0.088883zm31.842 0c-0.47376 0-0.91478 0.094236-1.324 0.28267-0.40378 0.18843-0.72955 0.46826-0.9772 0.83974-0.24765 0.37148-0.37155 0.83742-0.37155 1.3973v1.0496h-1.3891v1.4134h1.3891v7.6156h1.7441v-7.6156h1.9627v-1.4134h-1.9627v-0.79944c0-0.40378 0.09423-0.71039 0.28267-0.92035 0.18842-0.21536 0.49555-0.3235 0.92087-0.3235 0.18844 0 0.34725 0.01918 0.47646 0.05685 0.12921 0.03233 0.23159 0.05908 0.30696 0.08061l0.41961-1.4211c-0.12383-0.043073-0.3123-0.094259-0.56534-0.15348-0.24765-0.05922-0.55189-0.088883-0.91261-0.088883zm5.411 0c-0.47376 0-0.9153 0.094236-1.3245 0.28267-0.40379 0.18843-0.72955 0.46826-0.97721 0.83974-0.24765 0.37148-0.37155 0.83742-0.37155 1.3973v1.0496h-1.3891v1.4134h1.3891v7.6156h1.7446v-7.6156h1.9622v-1.4134h-1.9622v-0.79944c0-0.40378 0.09423-0.71039 0.28267-0.92035 0.18843-0.21536 0.49503-0.3235 0.92035-0.3235 0.18844 0 0.34725 0.01918 0.47646 0.05685 0.12921 0.03233 0.23159 0.05908 0.30696 0.08061l0.42013-1.4211c-0.12383-0.043073-0.31231-0.094259-0.56534-0.15348-0.24766-0.05922-0.55189-0.088883-0.91261-0.088883zm-143.24 0.56534v12.033h1.7446v-5.3542-5.2e-4c0-0.72144 0.20423-1.2787 0.6134-1.6717 0.40915-0.3984 0.92629-0.59738 1.5508-0.59738 0.60297 0 1.0765 0.18559 1.4211 0.55707 0.34456 0.36613 0.51677 0.88034 0.51677 1.5425v5.5237h1.7606v-5.7335c0-1.1252-0.28508-1.9728-0.85576-2.5435-0.57067-0.57606-1.3193-0.86454-2.2453-0.86454-0.69991 0-1.2677 0.14542-1.7038 0.43615-0.4307 0.28534-0.75122 0.67331-0.96118 1.1632h-0.12093v-4.4902h-1.7203zm84.914 0.85576v2.1482h-1.3162v1.4134h1.3162v5.3216c0 0.7322 0.2339 1.3192 0.70229 1.7606 0.4684 0.43609 1.0931 0.65423 1.8738 0.65423 0.43074 0 0.83443-0.06221 1.2113-0.18604l-0.33125-1.4537c-0.22073 0.04307-0.42496 0.0646-0.6134 0.0646-0.72679 0-1.0904-0.39848-1.0904-1.1953v-4.9661h1.8572v-1.4134h-1.8572v-2.1482h-1.7524zm35.646 0v2.1482h-1.3162v1.4134h1.3162v5.3216c0 0.7322 0.23441 1.3192 0.7028 1.7606 0.4684 0.43609 1.0926 0.65423 1.8733 0.65423 0.43073 0 0.83443-0.06221 1.2113-0.18604l-0.33073-1.4537c-0.22074 0.04307-0.42549 0.06512-0.61392 0.06512-0.7268 0-1.0904-0.39848-1.0904-1.1953v-4.9666h1.8578v-1.4134h-1.8578v-2.1482h-1.7524zm-125.61 5.2e-4v2.1477h-1.3162v1.4134h1.3162v5.3222c0 0.7322 0.23441 1.3186 0.7028 1.7601 0.4684 0.43609 1.0926 0.65423 1.8733 0.65423 0.43074 0 0.83443-0.0617 1.2113-0.18552l-0.33073-1.4537c-0.22073 0.04307-0.42548 0.0646-0.61391 0.0646-0.7268 0-1.0904-0.39848-1.0904-1.1953v-4.9666h1.8578v-1.4128l-1.8578-5.1e-4v-2.1477h-1.7523zm74.754 2.0345c-0.84523 0-1.5824 0.19372-2.2123 0.58136-0.62992 0.38766-1.1202 0.93442-1.4702 1.6397-0.34995 0.69987-0.52452 1.5178-0.52452 2.4546 0 0.9314 0.17457 1.747 0.52452 2.4469 0.34996 0.6945 0.84029 1.236 1.4702 1.6237 0.62987 0.38764 1.367 0.58136 2.2123 0.58136 0.84523 0 1.5829-0.19372 2.2128-0.58136 0.63525-0.3876 1.128-0.92914 1.4779-1.6237 0.34995-0.69987 0.52503-1.5155 0.52503-2.4469 0-0.9368-0.17508-1.7548-0.52503-2.4546-0.34991-0.7053-0.84266-1.2521-1.4779-1.6397-0.62987-0.38764-1.3675-0.58136-2.2128-0.58136zm27.538 0c-0.84523 0-1.5829 0.19372-2.2128 0.58136-0.62992 0.38766-1.1197 0.93442-1.4697 1.6397-0.34995 0.69987-0.52503 1.5184-0.52503 2.4552 0 0.9314 0.17508 1.747 0.52503 2.4469 0.34996 0.6945 0.83977 1.2355 1.4697 1.6232 0.62986 0.38764 1.3675 0.58136 2.2128 0.58136 0.84523 0 1.5829-0.19372 2.2128-0.58136 0.63525-0.3876 1.1275-0.92862 1.4774-1.6232 0.34994-0.69987 0.52503-1.5155 0.52503-2.4469 0-0.9368-0.17509-1.7553-0.52503-2.4552-0.34992-0.7053-0.84215-1.2521-1.4774-1.6397-0.62987-0.38764-1.3675-0.58136-2.2128-0.58136zm-84.235 5.1e-4c-0.83988 0-1.5722 0.19898-2.1968 0.59738-0.61917 0.393-1.1008 0.94218-1.4454 1.6474-0.33918 0.70526-0.50901 1.5209-0.50901 2.4469 0 0.9314 0.17271 1.7446 0.51728 2.4391 0.34993 0.6945 0.84503 1.2355 1.4857 1.6232 0.64607 0.38225 1.4133 0.57309 2.3017 0.57309 0.97985 0 1.7978-0.22339 2.4546-0.67024 0.6622-0.44687 1.0932-1.0338 1.2924-1.7606l-1.6635-0.31471c-0.16152 0.43071-0.42271 0.75647-0.78342 0.9772-0.36069 0.21536-0.78885 0.32298-1.2842 0.32298-0.74294 0-1.3486-0.23441-1.8169-0.7028-0.46836-0.47373-0.71853-1.1463-0.75086-2.0185h6.4198v-0.62993c0-1.0821-0.19372-1.9547-0.58136-2.6169-0.38224-0.66757-0.88021-1.1516-1.494-1.4531-0.61374-0.30688-1.2624-0.46044-1.9461-0.46044zm12.267 0c-0.67837 0-1.2787 0.11288-1.8009 0.339-0.52224 0.22073-0.93409 0.53311-1.2356 0.93689-0.29611 0.40381-0.44442 0.87209-0.44442 1.4051 0 0.63526 0.1995 1.1629 0.5979 1.5828 0.4038 0.41455 1.028 0.71878 1.8733 0.9126l1.5265 0.339c0.85066 0.19918 1.2759 0.58428 1.2759 1.155 0 0.34456-0.1722 0.63829-0.51676 0.88056-0.3446 0.24227-0.80473 0.36329-1.3808 0.36329-1.0767 0-1.7259-0.44676-1.9466-1.3405l-1.6878 0.25838c0.14538 0.79678 0.5357 1.4129 1.171 1.849 0.63533 0.4307 1.459 0.64595 2.4712 0.64595 0.72681 0 1.3678-0.11813 1.9224-0.35501 0.55454-0.24228 0.98792-0.57329 1.3002-0.99323 0.31226-0.41992 0.46819-0.90451 0.46819-1.4536 0-1.2545-0.82083-2.0676-2.4629-2.4391l-1.4454-0.32298c-0.48994-0.11306-0.84823-0.26085-1.0744-0.4439-0.22073-0.18843-0.33124-0.43623-0.33124-0.74311 0-0.34456 0.16458-0.62727 0.49299-0.84801 0.33383-0.22612 0.74803-0.33899 1.2433-0.33899 0.54916 0 0.96101 0.12626 1.2356 0.3793 0.27996 0.25303 0.47132 0.5305 0.57361 0.83199l1.5906-0.27492c-0.18307-0.69965-0.55436-1.262-1.1142-1.6872-0.55453-0.42532-1.3218-0.63821-2.3017-0.63821zm89.872 0c-0.67837 0-1.2787 0.11288-1.8009 0.339-0.52224 0.22073-0.93409 0.53311-1.2356 0.93689-0.29611 0.40381-0.44442 0.87209-0.44442 1.4051 0 0.63526 0.1995 1.1629 0.5979 1.5828 0.4038 0.41455 1.028 0.71878 1.8733 0.9126l1.5265 0.339c0.85067 0.19918 1.2759 0.58428 1.2759 1.155 0 0.34456-0.1722 0.63777-0.51676 0.88005-0.34453 0.24226-0.80473 0.36328-1.3808 0.36328-1.0767 0-1.7254-0.44675-1.9461-1.3405l-1.6883 0.25838c0.14538 0.79678 0.53622 1.4134 1.1715 1.8495 0.63533 0.4307 1.459 0.64595 2.4712 0.64595 0.7268 0 1.3673-0.11865 1.9218-0.35553 0.55454-0.24227 0.98792-0.57329 1.3002-0.99322s0.46819-0.90452 0.46819-1.4537c0-1.2544-0.82084-2.0671-2.4629-2.4386l-1.4459-0.32298c-0.48994-0.11306-0.84771-0.26137-1.0738-0.44442-0.22074-0.18843-0.33125-0.43623-0.33125-0.7431 0-0.34457 0.16458-0.62676 0.49299-0.8475 0.33376-0.22612 0.74803-0.33951 1.2433-0.33951 0.54916 0 0.96101 0.12678 1.2356 0.37982 0.27996 0.25303 0.47132 0.52998 0.57361 0.83147l1.5906-0.2744c-0.18302-0.69988-0.55423-1.2624-1.1141-1.6878-0.55454-0.42532-1.3218-0.63769-2.3017-0.63769zm-80.982 0.04083 0.15348 3.4034-2.8712-1.8469-0.87901 1.5322 3.0484 1.5565-3.0484 1.5565 0.87901 1.5322 2.8712-1.8469-0.15348 3.4034h1.7503l-0.15348-3.4034 2.8711 1.8469 0.87902-1.5322-3.0484-1.5565 3.0484-1.5565-0.87902-1.5322-2.8711 1.8469 0.15348-3.4034h-1.7503zm11.052 0 0.15348 3.4034-2.8712-1.8469-0.87901 1.5322 3.0484 1.5565-3.0484 1.5565 0.87901 1.5322 2.8712-1.8469-0.15348 3.4034h1.7503l-0.15348-3.4034 2.8711 1.8469 0.87902-1.5322-3.0484-1.5565 3.0484-1.5565-0.87902-1.5322-2.8711 1.8469 0.15348-3.4034h-1.7503zm11.052 0 0.15348 3.4034-2.8711-1.8469-0.87901 1.5322 3.0484 1.5565-3.0484 1.5565 0.87901 1.5322 2.8711-1.8469-0.15348 3.4034h1.7503l-0.15348-3.4034 2.8711 1.8469 0.87902-1.5322-3.0484-1.5565 3.0484-1.5565-0.87902-1.5322-2.8711 1.8469 0.15348-3.4034h-1.7503zm18.911 0.07183v5.7418c0 1.1198 0.27457 1.968 0.82372 2.544 0.54913 0.57602 1.26 0.86109 2.1322 0.85576 0.67836 0.00538 1.2438-0.15343 1.696-0.47646 0.45763-0.32304 0.791-0.72387 1.001-1.203h0.09715v1.5663h1.712v-9.0284h-1.7446v5.2974 5.2e-4c0 0.50607-0.11 0.92607-0.33073 1.2599-0.21536 0.33379-0.48757 0.58107-0.81597 0.74259-0.32303 0.16151-0.64879 0.24236-0.97721 0.24236-0.54376 0.00539-0.98765-0.17207-1.3322-0.53278-0.34456-0.36612-0.51677-0.85645-0.51677-1.4702v-5.5397h-1.7446zm50.239 0v5.7418c0 1.1198 0.27458 1.968 0.82372 2.544 0.54913 0.57602 1.26 0.86109 2.1322 0.85576 0.67836 0.00538 1.2433-0.15343 1.6955-0.47646 0.45764-0.32304 0.79153-0.72387 1.0015-1.203h0.09716v1.5668h1.712v-9.0289h-1.7446v5.2979c0 0.50607-0.10999 0.92607-0.33073 1.2599-0.21535 0.33379-0.48756 0.58107-0.81597 0.74259-0.32303 0.16151-0.64879 0.24236-0.9772 0.24236-0.54377 0.00539-0.98766-0.17207-1.3322-0.53278-0.34457-0.36612-0.51676-0.85593-0.51676-1.4697v-5.5402h-1.7446zm-112.41 1.341c0.69449 0 1.2326 0.22051 1.6149 0.66198 0.38225 0.44146 0.60564 1.0174 0.67024 1.7281h-4.6757c0.04845-0.65142 0.27998-1.2111 0.69453-1.6795 0.41994-0.47377 0.98536-0.71055 1.696-0.71055zm56.697 0.02377c0.55455 0 1.0123 0.14543 1.373 0.43615 0.36072 0.29073 0.62716 0.67818 0.79944 1.1627 0.17766 0.48455 0.26665 1.0179 0.26665 1.5994 0 0.57066-0.08899 1.0978-0.26665 1.5823-0.17226 0.47914-0.4387 0.86424-0.79944 1.155-0.36073 0.29072-0.81851 0.43615-1.373 0.43615-0.54915-2e-5 -1.0041-0.14544-1.3648-0.43615-0.36072-0.29072-0.62952-0.67582-0.80719-1.155-0.17228-0.48451-0.25838-1.0116-0.25838-1.5823 0-0.58146 0.0861-1.1148 0.25838-1.5994 0.17766-0.48454 0.44647-0.87199 0.80719-1.1627 0.36072-0.29072 0.81562-0.43615 1.3648-0.43615zm27.538 0c0.55455 0 1.0123 0.14543 1.373 0.43615 0.36072 0.29073 0.62716 0.6787 0.79944 1.1632 0.17766 0.48455 0.26613 1.0174 0.26613 1.5989 0 0.57066-0.08847 1.0983-0.26613 1.5828-0.17226 0.47914-0.4387 0.86372-0.79944 1.1544-0.36073 0.29072-0.81851 0.43615-1.373 0.43615-0.54914 0-1.004-0.14543-1.3648-0.43615s-0.63005-0.6753-0.80771-1.1544c-0.17228-0.48452-0.25838-1.0122-0.25838-1.5828 0-0.58146 0.0861-1.1143 0.25838-1.5989 0.17766-0.48454 0.44699-0.87251 0.80771-1.1632 0.36072-0.29072 0.81563-0.43615 1.3648-0.43615zm48.511 5.4348c-0.32842 0-0.60876 0.1134-0.84026 0.33952-0.22612 0.22612-0.339 0.50306-0.339 0.83147s0.11288 0.60587 0.339 0.83199c0.2315 0.22612 0.51184 0.339 0.84026 0.339 0.32841 0 0.60535-0.11288 0.83147-0.339 0.2315-0.22612 0.34726-0.50358 0.34726-0.83199s-0.11576-0.60535-0.34726-0.83147c-0.22612-0.22612-0.50306-0.33952-0.83147-0.33952z" fill="#fff" style="paint-order:fill markers stroke"/><script id="mesh_polyfill" type="text/javascript">!function(){const t="http://www.w3.org/2000/svg",e="http://www.w3.org/1999/xlink",s="http://www.w3.org/1999/xhtml",r=2;if(document.createElementNS(t,"meshgradient").x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case"translate":2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error("mesh.js: translate does not have 2 arguments!"),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case"scale":1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error("mesh.js: scale does not have 1 or 2 arguments!"),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case"rotate":if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error("math.js: No argument to rotate transform!");3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case"skewX":l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error("math.js: No argument to skewX transform!");break;case"skewY":l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error("math.js: No argument to skewY transform!");break;case"matrix":6===l.length?h=h.append(new g(...l)):console.error("math.js: Incorrect number of arguments for matrix!");break;default:console.error("mesh.js: Unhandled transform type: "+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error("mesh.js: argument to Affine.append is not affine!");let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute("type")||"bilinear"}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute("x")),n=Number(t.getAttribute("y"));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute("path"),c="l";null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case"l":0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case"L":0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case"c":0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case"C":0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error("mesh.js: "+c+" invalid path type.")}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if("bilinear"===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll("rect,circle,ellipse,path,text").forEach((r,n)=&gt;{let o=r.getAttribute("id");o||(o="patchjs_shape"+n,r.setAttribute("id",o));const i=r.style.fill.match(/^url\(\s*"?\s*#([^\s"]+)"?\s*\)/),a=r.style.stroke.match(/^url\(\s*"?\s*#([^\s"]+)"?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;"meshgradient"===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,"canvas");d(l,{width:i.width,height:i.height});const c=l.getContext("2d");let u=c.createImageData(i.width,i.height);const f=new b(a);"objectBoundingBox"===a.getAttribute("gradientUnits")&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute("gradientTransform");null!=p&amp;&amp;f.transform(h(p)),"userSpaceOnUse"===a.getAttribute("gradientUnits")&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,"image");d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,"xlink:href",g),r.parentNode.insertBefore(y,r),r.style.fill="none";const w=document.createElementNS(t,"use");w.setAttributeNS(e,"xlink:href","#"+o);const m="patchjs_clip"+n,M=document.createElementNS(t,"clipPath");M.setAttribute("id",m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute("clip-path","url(#"+m+")"),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;"meshgradient"===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute("stroke-miterlimit"))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,"canvas");d(p,{width:l,height:c});const y=p.getContext("2d");let g=y.createImageData(l,c);const w=new b(o);"objectBoundingBox"===o.getAttribute("gradientUnits")&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute("gradientTransform");null!=m&amp;&amp;w.transform(h(m)),"userSpaceOnUse"===o.getAttribute("gradientUnits")&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,"image");d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,"xlink:href",S);const k="pattern_clip"+n,A=document.createElementNS(t,"pattern");d(A,{id:k,patternUnits:"userSpaceOnUse",width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke="url(#"+k+")",g=null,p=null,S=null}}})}();</script><script type="text/javascript">!function(){const t="http://www.w3.org/2000/svg",e="http://www.w3.org/1999/xlink",s="http://www.w3.org/1999/xhtml",r=2;if(document.createElementNS(t,"meshgradient").x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case"translate":2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error("mesh.js: translate does not have 2 arguments!"),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case"scale":1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error("mesh.js: scale does not have 1 or 2 arguments!"),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case"rotate":if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error("math.js: No argument to rotate transform!");3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case"skewX":l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error("math.js: No argument to skewX transform!");break;case"skewY":l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error("math.js: No argument to skewY transform!");break;case"matrix":6===l.length?h=h.append(new g(...l)):console.error("math.js: Incorrect number of arguments for matrix!");break;default:console.error("mesh.js: Unhandled transform type: "+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error("mesh.js: argument to Affine.append is not affine!");let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute("type")||"bilinear"}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute("x")),n=Number(t.getAttribute("y"));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute("path"),c="l";null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case"l":0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case"L":0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case"c":0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case"C":0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error("mesh.js: "+c+" invalid path type.")}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if("bilinear"===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll("rect,circle,ellipse,path,text").forEach((r,n)=&gt;{let o=r.getAttribute("id");o||(o="patchjs_shape"+n,r.setAttribute("id",o));const i=r.style.fill.match(/^url\(\s*"?\s*#([^\s"]+)"?\s*\)/),a=r.style.stroke.match(/^url\(\s*"?\s*#([^\s"]+)"?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;"meshgradient"===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,"canvas");d(l,{width:i.width,height:i.height});const c=l.getContext("2d");let u=c.createImageData(i.width,i.height);const f=new b(a);"objectBoundingBox"===a.getAttribute("gradientUnits")&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute("gradientTransform");null!=p&amp;&amp;f.transform(h(p)),"userSpaceOnUse"===a.getAttribute("gradientUnits")&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,"image");d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,"xlink:href",g),r.parentNode.insertBefore(y,r),r.style.fill="none";const w=document.createElementNS(t,"use");w.setAttributeNS(e,"xlink:href","#"+o);const m="patchjs_clip"+n,M=document.createElementNS(t,"clipPath");M.setAttribute("id",m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute("clip-path","url(#"+m+")"),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;"meshgradient"===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute("stroke-miterlimit"))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,"canvas");d(p,{width:l,height:c});const y=p.getContext("2d");let g=y.createImageData(l,c);const w=new b(o);"objectBoundingBox"===o.getAttribute("gradientUnits")&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute("gradientTransform");null!=m&amp;&amp;w.transform(h(m)),"userSpaceOnUse"===o.getAttribute("gradientUnits")&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,"image");d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,"xlink:href",S);const k="pattern_clip"+n,A=document.createElementNS(t,"pattern");d(A,{id:k,patternUnits:"userSpaceOnUse",width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke="url(#"+k+")",g=null,p=null,S=null}}})}();</script></svg>
